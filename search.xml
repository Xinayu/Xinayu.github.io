<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>效果样式</title>
      <link href="/2018/07/05/Swiper3-0-%E6%95%88%E6%9E%9C%E6%A0%B7%E5%BC%8F/"/>
      <url>/2018/07/05/Swiper3-0-%E6%95%88%E6%9E%9C%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>整合提取各个效果对应的样式，按需所取，去除冗余</p><h2 id="渐变样式"><a href="#渐变样式" class="headerlink" title="渐变样式"></a>渐变样式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Fade */</span></span><br><span class="line"><span class="selector-class">.swiper-container-fade</span><span class="selector-class">.swiper-container-free-mode</span> <span class="selector-class">.swiper-slide</span> &#123;<span class="attribute">-webkit-transition-timing-function</span>: ease-out;<span class="attribute">-moz-transition-timing-function</span>: ease-out;<span class="attribute">-ms-transition-timing-function</span>: ease-out;<span class="attribute">-o-transition-timing-function</span>: ease-out;<span class="attribute">transition-timing-function</span>: ease-out;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-fade</span> <span class="selector-class">.swiper-slide</span> &#123;<span class="attribute">pointer-events</span>: none;<span class="attribute">-webkit-transition-property</span>: opacity;<span class="attribute">-moz-transition-property</span>: opacity;<span class="attribute">-o-transition-property</span>: opacity;<span class="attribute">transition-property</span>: opacity;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-fade</span> <span class="selector-class">.swiper-slide</span> <span class="selector-class">.swiper-slide</span> &#123;<span class="attribute">pointer-events</span>: none;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-fade</span> <span class="selector-class">.swiper-slide-active</span>,<span class="selector-class">.swiper-container-fade</span> <span class="selector-class">.swiper-slide-active</span> <span class="selector-class">.swiper-slide-active</span> &#123;<span class="attribute">pointer-events</span>: auto;&#125;</span><br><span class="line"><span class="selector-class">.swiper-zoom-container</span> &#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">display</span>: -webkit-box;<span class="attribute">display</span>: -moz-box;<span class="attribute">display</span>: -ms-flexbox;<span class="attribute">display</span>: -webkit-flex;<span class="attribute">display</span>: flex;<span class="attribute">-webkit-box-pack</span>: center;<span class="attribute">-moz-box-pack</span>: center;<span class="attribute">-ms-flex-pack</span>: center;<span class="attribute">-webkit-justify-content</span>: center;<span class="attribute">justify-content</span>: center;<span class="attribute">-webkit-box-align</span>: center;<span class="attribute">-moz-box-align</span>: center;<span class="attribute">-ms-flex-align</span>: center;<span class="attribute">-webkit-align-items</span>: center;<span class="attribute">align-items</span>: center;<span class="attribute">text-align</span>: center;&#125;</span><br><span class="line"><span class="selector-class">.swiper-zoom-container</span> &gt; <span class="selector-tag">img</span>,<span class="selector-class">.swiper-zoom-container</span> &gt; <span class="selector-tag">svg</span>,<span class="selector-class">.swiper-zoom-container</span> &gt; <span class="selector-tag">canvas</span> &#123;<span class="attribute">max-width</span>: <span class="number">100%</span>;<span class="attribute">max-height</span>: <span class="number">100%</span>;<span class="attribute">object-fit</span>: contain;&#125;</span><br></pre></td></tr></table></figure><p>添加JS：<code>effect:&#39;fade&#39;</code></p><h2 id="3D翻转"><a href="#3D翻转" class="headerlink" title="3D翻转"></a>3D翻转</h2><h3 id="公用样式"><a href="#公用样式" class="headerlink" title="公用样式"></a>公用样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 3D Container */</span></span><br><span class="line"><span class="selector-class">.swiper-container-3d</span> &#123;<span class="attribute">-webkit-perspective</span>: <span class="number">1200px</span>;<span class="attribute">-moz-perspective</span>: <span class="number">1200px</span>;<span class="attribute">-o-perspective</span>: <span class="number">1200px</span>;<span class="attribute">perspective</span>: <span class="number">1200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-wrapper</span>,<span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-slide</span>,<span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-slide-shadow-left</span>,<span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-slide-shadow-right</span>,<span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-slide-shadow-top</span>,<span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-slide-shadow-bottom</span>,</span><br><span class="line"><span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-cube-shadow</span> &#123;<span class="attribute">-webkit-transform-style</span>: preserve-<span class="number">3</span>d;<span class="attribute">-moz-transform-style</span>: preserve-<span class="number">3</span>d;<span class="attribute">-ms-transform-style</span>: preserve-<span class="number">3</span>d;<span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-slide-shadow-left</span>,<span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-slide-shadow-right</span>,<span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-slide-shadow-top</span>,<span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-slide-shadow-bottom</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">pointer-events</span>: none;<span class="attribute">z-index</span>: <span class="number">10</span>;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-slide-shadow-left</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">-webkit-gradient</span>(linear, left top, right top, from(rgba(0, 0, 0, 0.5)), <span class="built_in">to</span>(rgba(0, 0, 0, 0)));<span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(right, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));<span class="attribute">background-image</span>: <span class="built_in">-moz-linear-gradient</span>(right, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));<span class="attribute">background-image</span>: <span class="built_in">-o-linear-gradient</span>(right, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));<span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to left, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-slide-shadow-right</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">-webkit-gradient</span>(linear, right top, left top, from(rgba(0, 0, 0, 0.5)), <span class="built_in">to</span>(rgba(0, 0, 0, 0)));<span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(left, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));<span class="attribute">background-image</span>: <span class="built_in">-moz-linear-gradient</span>(left, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));<span class="attribute">background-image</span>: <span class="built_in">-o-linear-gradient</span>(left, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));<span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-slide-shadow-top</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">-webkit-gradient</span>(linear, left top, left bottom, from(rgba(0, 0, 0, 0.5)), <span class="built_in">to</span>(rgba(0, 0, 0, 0)));<span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(bottom, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));<span class="attribute">background-image</span>: <span class="built_in">-moz-linear-gradient</span>(bottom, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));<span class="attribute">background-image</span>: <span class="built_in">-o-linear-gradient</span>(bottom, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));<span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to top, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-3d</span> <span class="selector-class">.swiper-slide-shadow-bottom</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">-webkit-gradient</span>(linear, left bottom, left top, from(rgba(0, 0, 0, 0.5)), <span class="built_in">to</span>(rgba(0, 0, 0, 0)));<span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(top, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));<span class="attribute">background-image</span>: <span class="built_in">-moz-linear-gradient</span>(top, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));<span class="attribute">background-image</span>: <span class="built_in">-o-linear-gradient</span>(top, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));<span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, rgba(0, 0, 0, 0.5), <span class="built_in">rgba</span>(0, 0, 0, 0));&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-coverflow</span> <span class="selector-class">.swiper-wrapper</span>,<span class="selector-class">.swiper-container-flip</span> <span class="selector-class">.swiper-wrapper</span> &#123;<span class="attribute">-ms-perspective</span>: <span class="number">1200px</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="cube翻转"><a href="#cube翻转" class="headerlink" title="cube翻转"></a>cube翻转</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Cube */</span></span><br><span class="line"><span class="selector-class">.swiper-container-cube</span> <span class="selector-class">.swiper-slide</span> &#123;<span class="attribute">visibility</span>: hidden;<span class="attribute">-webkit-transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;<span class="attribute">-moz-transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;<span class="attribute">-ms-transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-cube</span><span class="selector-class">.swiper-container-rtl</span> <span class="selector-class">.swiper-slide</span> &#123;<span class="attribute">-webkit-transform-origin</span>: <span class="number">100%</span> <span class="number">0</span>;<span class="attribute">-moz-transform-origin</span>: <span class="number">100%</span> <span class="number">0</span>;<span class="attribute">-ms-transform-origin</span>: <span class="number">100%</span> <span class="number">0</span>;<span class="attribute">transform-origin</span>: <span class="number">100%</span> <span class="number">0</span>;&#125;<span class="selector-class">.swiper-container-cube</span> <span class="selector-class">.swiper-slide-active</span>,<span class="selector-class">.swiper-container-cube</span> <span class="selector-class">.swiper-slide-next</span>,<span class="selector-class">.swiper-container-cube</span> <span class="selector-class">.swiper-slide-prev</span>,<span class="selector-class">.swiper-container-cube</span> <span class="selector-class">.swiper-slide-next</span> + <span class="selector-class">.swiper-slide</span> &#123;<span class="attribute">pointer-events</span>: auto;<span class="attribute">visibility</span>: visible;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-cube</span> <span class="selector-class">.swiper-cube-shadow</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">bottom</span>: <span class="number">0px</span>;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">background</span>: <span class="number">#000</span>;<span class="attribute">opacity</span>: <span class="number">0.6</span>;<span class="attribute">-webkit-filter</span>: <span class="built_in">blur</span>(50px);<span class="attribute">filter</span>: <span class="built_in">blur</span>(50px);<span class="attribute">z-index</span>: <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="coverflow翻转"><a href="#coverflow翻转" class="headerlink" title="coverflow翻转"></a>coverflow翻转</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Coverflow */</span></span><br><span class="line"><span class="selector-class">.swiper-container-coverflow</span> <span class="selector-class">.swiper-wrapper</span>,<span class="selector-class">.swiper-container-flip</span> <span class="selector-class">.swiper-wrapper</span> &#123;<span class="attribute">-ms-perspective</span>: <span class="number">1200px</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="添加JS代码"><a href="#添加JS代码" class="headerlink" title="添加JS代码"></a>添加JS代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">effect : <span class="string">'cube'</span>,</span><br><span class="line">cube: &#123;</span><br><span class="line">  slideShadows: <span class="literal">true</span>,     <span class="comment">//开启slide阴影。默认 true。</span></span><br><span class="line">  shadow: <span class="literal">true</span>,           <span class="comment">//开启投影。默认 true。</span></span><br><span class="line">  shadowOffset: <span class="number">100</span>,      <span class="comment">//投影距离。默认 20，单位px。</span></span><br><span class="line">  shadowScale: <span class="number">0.6</span>       <span class="comment">//投影缩放比例。默认0.94。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------华丽的分割线------------</span></span><br><span class="line">effect : <span class="string">'coverflow'</span>,</span><br><span class="line">slidesPerView: <span class="number">3</span>,</span><br><span class="line">coverflow: &#123;</span><br><span class="line">  rotate: <span class="number">30</span>,              <span class="comment">//slide做3d旋转时Y轴的旋转角度。默认50。</span></span><br><span class="line">  stretch: <span class="number">10</span>,             <span class="comment">//每个slide之间的拉伸值，越大slide靠得越紧。 默认0</span></span><br><span class="line">  depth: <span class="number">60</span>,               <span class="comment">//slide的位置深度。值越大z轴距离越远，看起来越小。 默认100。</span></span><br><span class="line">  modifier: <span class="number">2</span>,             <span class="comment">//epth和rotate和stretch的倍率，相当于depth*modifier、rotate*modifier、stretch*modifier，值越大这三个参数的效果越明显。默认1。</span></span><br><span class="line">  slideShadows : <span class="literal">false</span>     <span class="comment">//阴影</span></span><br><span class="line">&#125;,</span><br><span class="line">centeredSlides: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Swiper3.0手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swiper3.0 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>局部组件</title>
      <link href="/2018/07/05/Swiper3-0-%E5%B1%80%E9%83%A8%E7%BB%84%E4%BB%B6/"/>
      <url>/2018/07/05/Swiper3-0-%E5%B1%80%E9%83%A8%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>最好不要直接直接引用完整的swiper的css文件<br>要根据页面中是否包括滑动块（slides）、分页器(pagination)、前进按钮和动画等进行<strong>精简</strong></p><h2 id="前进后退按钮"><a href="#前进后退按钮" class="headerlink" title="前进后退按钮"></a>前进后退按钮</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Arrows */</span></span><br><span class="line"><span class="selector-class">.swiper-button-prev</span>,<span class="selector-class">.swiper-button-next</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">50%</span>;<span class="attribute">width</span>: <span class="number">27px</span>;<span class="attribute">height</span>: <span class="number">44px</span>;<span class="attribute">margin-top</span>: -<span class="number">22px</span>;<span class="attribute">z-index</span>: <span class="number">10</span>;<span class="attribute">cursor</span>: pointer;<span class="attribute">-moz-background-size</span>: <span class="number">27px</span> <span class="number">44px</span>;<span class="attribute">-webkit-background-size</span>: <span class="number">27px</span> <span class="number">44px</span>;<span class="attribute">background-size</span>: <span class="number">27px</span> <span class="number">44px</span>;<span class="attribute">background-position</span>: center;<span class="attribute">background-repeat</span>: no-repeat;&#125;</span><br><span class="line"><span class="selector-class">.swiper-button-prev</span><span class="selector-class">.swiper-button-disabled</span>,<span class="selector-class">.swiper-button-next</span><span class="selector-class">.swiper-button-disabled</span> &#123;<span class="attribute">opacity</span>: <span class="number">0.35</span>;<span class="attribute">cursor</span>: auto;<span class="attribute">pointer-events</span>: none;&#125;</span><br><span class="line"><span class="selector-class">.swiper-button-prev</span>,<span class="selector-class">.swiper-container-rtl</span> <span class="selector-class">.swiper-button-next</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23007aff'%2F%3E%3C%2Fsvg%3E"</span>);<span class="attribute">left</span>: <span class="number">10px</span>;<span class="attribute">right</span>: auto;&#125;</span><br><span class="line"><span class="selector-class">.swiper-button-prev</span><span class="selector-class">.swiper-button-black</span>,<span class="selector-class">.swiper-container-rtl</span> <span class="selector-class">.swiper-button-next</span><span class="selector-class">.swiper-button-black</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23000000'%2F%3E%3C%2Fsvg%3E"</span>);&#125;</span><br><span class="line"><span class="selector-class">.swiper-button-prev</span><span class="selector-class">.swiper-button-white</span>,<span class="selector-class">.swiper-container-rtl</span> <span class="selector-class">.swiper-button-next</span><span class="selector-class">.swiper-button-white</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23ffffff'%2F%3E%3C%2Fsvg%3E"</span>);&#125;</span><br><span class="line"><span class="selector-class">.swiper-button-next</span>,<span class="selector-class">.swiper-container-rtl</span> <span class="selector-class">.swiper-button-prev</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23007aff'%2F%3E%3C%2Fsvg%3E"</span>);<span class="attribute">right</span>: <span class="number">10px</span>;<span class="attribute">left</span>: auto;&#125;</span><br><span class="line"><span class="selector-class">.swiper-button-next</span><span class="selector-class">.swiper-button-black</span>,<span class="selector-class">.swiper-container-rtl</span> <span class="selector-class">.swiper-button-prev</span><span class="selector-class">.swiper-button-black</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23000000'%2F%3E%3C%2Fsvg%3E"</span>);&#125;</span><br><span class="line"><span class="selector-class">.swiper-button-next</span><span class="selector-class">.swiper-button-white</span>,<span class="selector-class">.swiper-container-rtl</span> <span class="selector-class">.swiper-button-prev</span><span class="selector-class">.swiper-button-white</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23ffffff'%2F%3E%3C%2Fsvg%3E"</span>);&#125;</span><br><span class="line"><span class="comment">/* 改变背景 */</span></span><br><span class="line"><span class="selector-class">.swiper-button-next</span>,<span class="selector-class">.swiper-button-prev</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0.65rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0.65rem</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(//game.gtimg.cn/images/cqby/cp/a20180110bycjm/arrow.png) no-repeat center;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.swiper-button-prev</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(//game.gtimg.cn/images/cqby/cp/a20180110bycjm/arrow2.png) no-repeat center;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分页器"><a href="#分页器" class="headerlink" title="分页器"></a>分页器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Pagination Styles */</span></span><br><span class="line"><span class="selector-class">.swiper-pagination</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">text-align</span>: center;<span class="attribute">-webkit-transition</span>: <span class="number">300ms</span>;<span class="attribute">-moz-transition</span>: <span class="number">300ms</span>;<span class="attribute">-o-transition</span>: <span class="number">300ms</span>;<span class="attribute">transition</span>: <span class="number">300ms</span>;<span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);<span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);<span class="attribute">-o-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);<span class="attribute">z-index</span>: <span class="number">10</span>;&#125;</span><br><span class="line"><span class="comment">/* Common Styles */</span></span><br><span class="line"><span class="selector-class">.swiper-pagination-fraction</span>,<span class="selector-class">.swiper-pagination-custom</span>,<span class="selector-class">.swiper-container-horizontal</span> &gt; <span class="selector-class">.swiper-pagination-bullets</span> &#123;<span class="attribute">z-index</span>: <span class="number">3</span>;<span class="attribute">bottom</span>: <span class="number">14px</span>;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;</span><br><span class="line"><span class="comment">/* Bullets */</span></span><br><span class="line"><span class="selector-class">.swiper-pagination-bullet</span> &#123;<span class="attribute">display</span>: inline-block;<span class="attribute">border-radius</span>: <span class="number">100%</span>;<span class="attribute">background</span>: <span class="number">#000</span>;<span class="attribute">opacity</span>: <span class="number">0.2</span>;&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.swiper-pagination-bullet</span> &#123;<span class="attribute">border</span>: none;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span>;<span class="attribute">box-shadow</span>: none;<span class="attribute">-moz-appearance</span>: none;<span class="attribute">-ms-appearance</span>: none;<span class="attribute">-webkit-appearance</span>: none;<span class="attribute">appearance</span>: none;&#125;</span><br><span class="line"><span class="selector-class">.swiper-pagination-clickable</span> <span class="selector-class">.swiper-pagination-bullet</span> &#123;<span class="attribute">cursor</span>: pointer;&#125;</span><br><span class="line"><span class="selector-class">.swiper-pagination-white</span> <span class="selector-class">.swiper-pagination-bullet</span> &#123;<span class="attribute">background</span>: <span class="number">#fff</span>;&#125;</span><br><span class="line"><span class="selector-class">.swiper-pagination-bullet-active</span> &#123;<span class="attribute">opacity</span>: <span class="number">1</span>;<span class="attribute">background</span>: <span class="number">#007aff</span>;&#125;</span><br><span class="line"><span class="selector-class">.swiper-pagination-white</span> <span class="selector-class">.swiper-pagination-bullet-active</span> &#123;<span class="attribute">background</span>: <span class="number">#fff</span>;&#125;</span><br><span class="line"><span class="selector-class">.swiper-pagination-black</span> <span class="selector-class">.swiper-pagination-bullet-active</span> &#123;<span class="attribute">background</span>: <span class="number">#000</span>;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-vertical</span> &gt; <span class="selector-class">.swiper-pagination-bullets</span> &#123;<span class="attribute">right</span>: <span class="number">10px</span>;<span class="attribute">top</span>: <span class="number">50%</span>;<span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0px, -50%, 0);<span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(0px, -50%, 0);<span class="attribute">-o-transform</span>: <span class="built_in">translate</span>(0px, -50%);<span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(0px, -50%, 0);<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0px, -50%, 0);&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-vertical</span> &gt; <span class="selector-class">.swiper-pagination-bullets</span> <span class="selector-class">.swiper-pagination-bullet</span> &#123;<span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;<span class="attribute">display</span>: block;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-horizontal</span> &gt; <span class="selector-class">.swiper-pagination-bullets</span> <span class="selector-class">.swiper-pagination-bullet</span> &#123;<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;&#125;</span><br><span class="line"><span class="comment">/* 自定义进度条的样式 */</span></span><br><span class="line"><span class="selector-class">.swiper-pagination-bullet</span>&#123;<span class="attribute">width</span>: <span class="number">2.2rem</span>;<span class="attribute">height</span>: <span class="number">2.2rem</span>;<span class="attribute">background</span>: red;<span class="attribute">opacity</span>:<span class="number">0.5</span>;&#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.swiper-pagination-bullet</span><span class="selector-class">.swiper-pagination-bullet-active</span>&#123;<span class="attribute">background</span>: black;<span class="attribute">opacity</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>分页器切换页面  <span class="btn-copy"></span><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper (<span class="string">'#swiper-container1'</span>, &#123;</span><br><span class="line">  pagination : <span class="string">'.swiper-pagination'</span>,  <span class="comment">//分页器</span></span><br><span class="line">  paginationClickable :<span class="literal">true</span>        <span class="comment">//点击分页器自动切换</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Swiper3.0手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swiper3.0 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用方法</title>
      <link href="/2018/07/05/swiper3-0-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2018/07/05/swiper3-0-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p><code>Swiper</code>: 整个滑动对象，有时特指滑块释放后仍然正向移动直到贴合边缘的过程(过渡)<br><code>container</code>: Swiper的容器，包括滑块（slides）、封套（wrapper)、分页器(pagination)、前进按钮等<br><code>wrapper</code>: 触控的对象，可触摸区域，移动的块的集合，过渡时会随slide切换产生位移<br><code>slider</code>: 切换的滑块，可以包含文字、图片、html元素或另外一个Swiper<br><code>pagination</code>: 分页器，指示slide的数量和当前活动的slide<br><img src="https://miao.su/images/2018/07/05/swiper2fc2b.png" alt=""></p><h2 id="结构样式"><a href="#结构样式" class="headerlink" title="结构样式"></a>结构样式</h2><p>线上路径 <copy><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//ossweb-img.qq.com/images/js/swiper/swiper-3.4.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></copy></p><p>页面结构 <copy><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span> <span class="attr">id</span>=<span class="string">"swiper-container1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果需要分页器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 如果需要导航按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-prev"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-next"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 如果需要滚动条 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-scrollbar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></copy></p><p>基础样式 <copy><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* base */</span></span><br><span class="line"><span class="selector-class">.swiper-wp8-horizontal</span> &#123;<span class="attribute">-ms-touch-action</span>: pan-y;<span class="attribute">touch-action</span>: pan-y;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container</span> &#123;<span class="attribute">margin-left</span>: auto;<span class="attribute">margin-right</span>: auto;<span class="attribute">position</span>: relative;<span class="attribute">overflow</span>: hidden;<span class="comment">/* Fix of Webkit flickering */</span><span class="attribute">z-index</span>: <span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-no-flexbox</span> <span class="selector-class">.swiper-slide</span> &#123;<span class="attribute">float</span>: left;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-vertical</span> &gt; <span class="selector-class">.swiper-wrapper</span> &#123;<span class="attribute">-webkit-box-orient</span>: vertical;<span class="attribute">-moz-box-orient</span>: vertical;<span class="attribute">-ms-flex-direction</span>: column;<span class="attribute">-webkit-flex-direction</span>: column;<span class="attribute">flex-direction</span>: column;&#125;</span><br><span class="line"><span class="selector-class">.swiper-wrapper</span> &#123;<span class="attribute">position</span>: relative;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">z-index</span>: <span class="number">1</span>;<span class="attribute">display</span>: -webkit-box;<span class="attribute">display</span>: -moz-box;<span class="attribute">display</span>: -ms-flexbox;<span class="attribute">display</span>: -webkit-flex;<span class="attribute">display</span>: flex;<span class="attribute">-webkit-transition-property</span>: -webkit-transform;<span class="attribute">-moz-transition-property</span>: -moz-transform;<span class="attribute">-o-transition-property</span>: -o-transform;<span class="attribute">-ms-transition-property</span>: -ms-transform;<span class="attribute">transition-property</span>: transform;<span class="attribute">-webkit-box-sizing</span>: content-box;<span class="attribute">-moz-box-sizing</span>: content-box;<span class="attribute">box-sizing</span>: content-box;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-android</span> <span class="selector-class">.swiper-slide</span>,<span class="selector-class">.swiper-wrapper</span> &#123;<span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0px, 0, 0);<span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(0px, 0, 0);<span class="attribute">-o-transform</span>: <span class="built_in">translate</span>(0px, 0px);<span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(0px, 0, 0);<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0px, 0, 0);&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-multirow</span> &gt; <span class="selector-class">.swiper-wrapper</span> &#123;<span class="attribute">-webkit-box-lines</span>: multiple;<span class="attribute">-moz-box-lines</span>: multiple;<span class="attribute">-ms-flex-wrap</span>: wrap;<span class="attribute">-webkit-flex-wrap</span>: wrap;<span class="attribute">flex-wrap</span>: wrap;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-free-mode</span> &gt; <span class="selector-class">.swiper-wrapper</span> &#123;<span class="attribute">-webkit-transition-timing-function</span>: ease-out;<span class="attribute">-moz-transition-timing-function</span>: ease-out;<span class="attribute">-ms-transition-timing-function</span>: ease-out;<span class="attribute">-o-transition-timing-function</span>: ease-out;<span class="attribute">transition-timing-function</span>: ease-out;<span class="attribute">margin</span>: <span class="number">0</span> auto;&#125;</span><br><span class="line"><span class="selector-class">.swiper-slide</span> &#123;<span class="attribute">-webkit-flex-shrink</span>: <span class="number">0</span>;<span class="attribute">-ms-flex</span>: <span class="number">0</span> <span class="number">0</span> auto;<span class="attribute">flex-shrink</span>: <span class="number">0</span>;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">position</span>: relative;&#125;</span><br><span class="line"><span class="comment">/* Auto Height */</span></span><br><span class="line"><span class="selector-class">.swiper-container-autoheight</span>,<span class="selector-class">.swiper-container-autoheight</span> <span class="selector-class">.swiper-slide</span> &#123;<span class="attribute">height</span>: auto;&#125;</span><br><span class="line"><span class="selector-class">.swiper-container-autoheight</span> <span class="selector-class">.swiper-wrapper</span> &#123;<span class="attribute">-webkit-box-align</span>: start;<span class="attribute">-ms-flex-align</span>: start;<span class="attribute">-webkit-align-items</span>: flex-start;<span class="attribute">align-items</span>: flex-start;<span class="attribute">-webkit-transition-property</span>: -webkit-transform, height;<span class="attribute">-moz-transition-property</span>: -moz-transform;<span class="attribute">-o-transition-property</span>: -o-transform;<span class="attribute">-ms-transition-property</span>: -ms-transform;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置宽度和高度 */</span></span><br><span class="line"><span class="selector-id">#swiper-container1</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.swiper-slide1</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></copy></p><p>初始化 <copy><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper (<span class="string">'#swiper-container1'</span>, &#123;</span><br><span class="line">  direction: <span class="string">'vertical'</span>,</span><br><span class="line">  loop: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 如果需要分页器</span></span><br><span class="line">  pagination: <span class="string">'.swiper-pagination'</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">  nextButton: <span class="string">'.swiper-button-next'</span>,</span><br><span class="line">  prevButton: <span class="string">'.swiper-button-prev'</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要滚动条</span></span><br><span class="line">  scrollbar: <span class="string">'.swiper-scrollbar'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></copy></p><p>更多细节参考官网API:<a href="http://3.swiper.com.cn/api/index.html" target="_blank" rel="noopener">http://3.swiper.com.cn/api/index.html</a></p>]]></content>
      
      <categories>
          
          <category> Swiper3.0手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swiper3.0 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>添加本地搜索</title>
      <link href="/2018/07/04/hexo--%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/"/>
      <url>/2018/07/04/hexo--%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/</url>
      <content type="html"><![CDATA[<p>随着文章数量的不断增加，目录和标签已经不能满足我们的需求，添加本地搜索有助于我们对所需资源进行快捷定位</p><h2 id="安装搜索插件"><a href="#安装搜索插件" class="headerlink" title="安装搜索插件"></a>安装搜索插件</h2><p><code>cd</code>你的博客目录，鼠标右键选择<code>Git Bash Here</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p><h2 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h2><p>在<code>_config.yml</code>添加搜索支持<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">search：</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">    field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">    format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">    limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></p><h2 id="开启搜索功能"><a href="#开启搜索功能" class="headerlink" title="开启搜索功能"></a>开启搜索功能</h2><p>修改主题目录下的<code>_config.yml</code><br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> hexo功能整合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo + Github</title>
      <link href="/2018/07/04/hexo--Hexo+Github/"/>
      <url>/2018/07/04/hexo--Hexo+Github/</url>
      <content type="html"><![CDATA[<p>利用Hexo+Github搭建个人博客</p><h2 id="安装Git-nodejs"><a href="#安装Git-nodejs" class="headerlink" title="安装Git + nodejs"></a>安装Git + nodejs</h2><p>Git: <a href="https://www.git-scm.com/download/" target="_blank" rel="noopener">https://www.git-scm.com/download/</a><br>Node.js: <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g                   //全局安装hexo</span><br><span class="line">$ hexo init blog            //创建blog文件并且初始化</span><br><span class="line">$ cd blog            //进入刚才创建的blog文件</span><br><span class="line">$ npm install    //安装各种依赖</span><br><span class="line">$ hexo server    //启动服务</span><br></pre></td></tr></table></figure><h2 id="配置个人用户信息"><a href="#配置个人用户信息" class="headerlink" title="配置个人用户信息"></a>配置个人用户信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;yourname&quot;          //用户名</span><br><span class="line">$ git config --global user.email &quot;yourEmail&quot;        //邮箱</span><br></pre></td></tr></table></figure><p>在<code>_config.yml</code>中添加关联的仓库地址<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p><h2 id="创建SSH"><a href="#创建SSH" class="headerlink" title="创建SSH"></a>创建SSH</h2><p><strong>SSH</strong>是一种网络协议，用于计算机之间的加密登录<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com</span><br></pre></td></tr></table></figure></p><p>进入文件找到<code>key</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>图中蓝色区域<br><img src="https://miao.su/images/2018/07/04/ssshfacdb.png" alt=""></p><h2 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h2><p>新建一个名为<code>yourname.github.io</code>的仓库<br>在全局<code>settings</code>里面配置<strong>SSH</strong>，把<code>key</code>复制进里面，<code>titile</code>自拟<br><img src="https://miao.su/images/2018/07/04/kryb9a07.png" alt=""></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>安装部署插件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>依次输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>访问: <code>https://yourname.github.io/</code></p>]]></content>
      
      <categories>
          
          <category> hexo功能整合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue搭建项目</title>
      <link href="/2018/07/02/Vue--%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/07/02/Vue--%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h2 id="在使用vue搭建项目之前，要安装所需依赖"><a href="#在使用vue搭建项目之前，要安装所需依赖" class="headerlink" title="在使用vue搭建项目之前，要安装所需依赖"></a>在使用vue搭建项目之前，要安装所需依赖</h2><ul><li>安装 <code>nodejs</code></li><li>安装 <code>webpack</code>:<code>$ npm install webpack -g</code></li><li>安装 <code>vue-cli</code>:<code>$ npm install vue-cli -g</code><blockquote><p>鉴于国内网络限制，可以选择切换镜像源<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br><code>npm install</code>不推荐使用国内镜像</p></blockquote></li></ul><h2 id="初始化项目文件"><a href="#初始化项目文件" class="headerlink" title="初始化项目文件"></a>初始化项目文件</h2><ul><li>创建一个名为“Abc”的初始化文件夹 <code>vue init webpack Abc</code> </li><li>如果已经提前建好了文件夹，则只需在该文件夹内 <code>vue init webpack</code></li><li>如果<code>node_modules</code>没有安装，则<code>npm install</code></li><li>使用<code>npm run dev</code>启动</li></ul><h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><p>vue适合用来构建SPA应用，所以路由嵌套很正常。<br>在入口页面<strong>App.html</strong>中，<code>router-view</code>是路由区域。单页面的切换就在该区域。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="引入路由组件-src-router-index-js"><a href="#引入路由组件-src-router-index-js" class="headerlink" title="引入路由组件(src / router / index.js)"></a>引入路由组件(<strong>src / router / index.js</strong>)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//依赖</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">//主路由</span></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">'@/components/Main'</span></span><br><span class="line"><span class="comment">//分路由</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'@/components/Login'</span>              <span class="comment">//登录页面</span></span><br><span class="line"><span class="keyword">import</span> Card <span class="keyword">from</span> <span class="string">'@/components/pages/Card'</span>          <span class="comment">//学籍卡片</span></span><br></pre></td></tr></table></figure><h4 id="设置路由的跳转-src-router-index-js"><a href="#设置路由的跳转-src-router-index-js" class="headerlink" title="设置路由的跳转(src / router / index.js)"></a>设置路由的跳转(<strong>src / router / index.js</strong>)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// mode: 'history',</span></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">'*'</span>,</span><br><span class="line">      hidden: <span class="literal">true</span>,</span><br><span class="line">      redirect: &#123; <span class="attr">path</span>: <span class="string">'/404'</span> &#125;  <span class="comment">//重定向404</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/login'</span>,             <span class="comment">//路径</span></span><br><span class="line">      component: Login,           <span class="comment">//组件</span></span><br><span class="line">      name:<span class="string">''</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/404'</span>,             </span><br><span class="line">      component: notFound,</span><br><span class="line">      name:<span class="string">''</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      leaf: <span class="literal">true</span>,</span><br><span class="line">      icon:<span class="string">'icon-myschedule'</span>,    <span class="comment">//参数，传递给路由页面进行渲染</span></span><br><span class="line">      iconColor:<span class="string">'#d10dff'</span>,</span><br><span class="line">      component: Main,</span><br><span class="line">      main:<span class="literal">true</span>,</span><br><span class="line">      name:<span class="string">''</span>,</span><br><span class="line">      children:[</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/Plan'</span>, <span class="attr">component</span>: Plan, <span class="attr">name</span>: <span class="string">'培养方案'</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="链接跳转-src-components-xx-vue"><a href="#链接跳转-src-components-xx-vue" class="headerlink" title="链接跳转(src / components / xx.vue)"></a>链接跳转(<strong>src / components / xx.vue</strong>)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--使用to来跳转，对应路由文件里面的path--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>获取路由参数：<code>v-for=&quot;(item,index) in $router.options.routes</code>，<br>  使用参数：<code>item.children[n].path</code></p></blockquote>]]></content>
      
      <categories>
          
          <category> Vue使用手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vuex参考</title>
      <link href="/2018/07/02/Vue--Vuex/"/>
      <url>/2018/07/02/Vue--Vuex/</url>
      <content type="html"><![CDATA[<p>vuex是数据仓库，同时也是状态管理器</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>新建js文件<br><img src="https://miao.su/images/2018/07/04/vuex1684a3.png" alt=""><br>写入store.js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入依赖</span></span><br><span class="line"><span class="keyword">import</span>  Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span>  Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state =&#123;  <span class="comment">//state是状态</span></span><br><span class="line">  count:<span class="number">1</span>       <span class="comment">//count是公用的数据，放在状态里面</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//暴露出去</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在组件中使用（<strong>app.vue</strong>）<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用$.store.state获取状态 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是数据仓库的值：&#123;&#123;$.store.state.count&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>①</strong>使用<code>computed</code>简化指令（<strong>app.vue</strong>）<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed:&#123;   <span class="comment">//computer用于临时计算，返回一个对象</span></span><br><span class="line">  count()&#123;   <span class="comment">//这里把count的值指向为  this.$store.state.count</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在，<code>count</code>的值就有了，而且指向为<code>this.$store.state.count</code><br>这个时候就可以这么写<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是数据仓库的值：&#123;&#123;$store.state.count&#125;&#125;--&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>②</strong>使用<code>mapState</code>简化指令（<strong>app.vue</strong>）<br>引入和添加（<strong>app.vue</strong>）<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入mapState</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">//添加方式</span></span><br><span class="line">computed:mapState([<span class="string">'count'</span>])</span><br></pre></td></tr></table></figure></p><h2 id="改变数据的值"><a href="#改变数据的值" class="headerlink" title="改变数据的值"></a>改变数据的值</h2><p>通过mutations来改变state里面的值(<strong>store / vuex.js</strong>)<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  add(state,n)&#123;    <span class="comment">//第一个是状态参数，第二个是自定义参数</span></span><br><span class="line">    state.count+=n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//把状态和方法都暴露出去</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,mutations</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在组件里接收数据（<strong>app.vue</strong>）<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span>  <span class="string">'@/vuex/store'</span>;  <span class="comment">//接收数据</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState,mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        message:<span class="string">'hello world'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    store,  <span class="comment">//接收数据</span></span><br><span class="line">    methods:mapMutations([</span><br><span class="line">        <span class="string">'add'</span>,<span class="string">'reduce'</span></span><br><span class="line">    ]),</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>使用数据（<strong>app.vue</strong>）<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.commit('add',10)"</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--只能通过 $store.commit（）调用方法--</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Vue使用手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Axios+Mock</title>
      <link href="/2018/07/02/Vue--Axios+Mock/"/>
      <url>/2018/07/02/Vue--Axios+Mock/</url>
      <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><code>Axios</code>用于前后端通信，<code>mock.js</code>用于模拟随机数据，搭配使用旨在脱离后端进行开发测试。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-- data                            // 目录示例</span><br><span class="line"></span><br><span class="line">     |-- api.js                     // 统一管理axios所有的请求</span><br><span class="line"></span><br><span class="line">     |-- index.js                // 拦截请求</span><br><span class="line"></span><br><span class="line">     |-- mock-data.js               // 模拟数据</span><br></pre></td></tr></table></figure><h2 id="模拟随机数据（data-mock-data-js）"><a href="#模拟随机数据（data-mock-data-js）" class="headerlink" title="模拟随机数据（data / mock-data.js）"></a>模拟随机数据（<strong>data / mock-data.js</strong>）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入mock</span></span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span>;</span><br><span class="line"><span class="comment">//模拟用户</span></span><br><span class="line"><span class="keyword">const</span> LoginUsers = &#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  username: <span class="string">'USER3114001996'</span>,</span><br><span class="line">  password: <span class="string">'123456'</span>,</span><br><span class="line">  num:<span class="string">'3114001996'</span>,</span><br><span class="line">  year:<span class="string">'2014'</span>,</span><br><span class="line">  departments:<span class="string">'信息工程学院'</span>,</span><br><span class="line">  program:<span class="string">'轨道交通电气化'</span>,</span><br><span class="line">  cla:<span class="string">'140716'</span>,</span><br><span class="line">  sec:<span class="string">'男'</span>,</span><br><span class="line">  desc:<span class="string">'如有信息错误，请及时反馈~~'</span>,</span><br><span class="line">  name: Mock.Random.cname(),</span><br><span class="line">  phone: Mock.mock(<span class="regexp">/^\d&#123;11&#125;/</span>),</span><br><span class="line">  weChat: Mock.mock(<span class="regexp">/^\d&#123;9&#125;/</span>),</span><br><span class="line">  pas:  Mock.Random.id(),</span><br><span class="line">  schoolNum:Mock.mock(<span class="regexp">/^\d&#123;10&#125;/</span>),</span><br><span class="line">  address: Mock.Random.province() +Mock.Random.city()+Mock.Random.county(<span class="literal">true</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//导出数据</span></span><br><span class="line"><span class="keyword">export</span> &#123;LoginUsers&#125;;</span><br></pre></td></tr></table></figure><h2 id="拦截请求（data-index-js）"><a href="#拦截请求（data-index-js）" class="headerlink" title="拦截请求（data / index.js）"></a>拦截请求（<strong>data / index.js</strong>）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//依赖</span></span><br><span class="line"><span class="keyword">let</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"><span class="keyword">let</span> MockAdapter = <span class="built_in">require</span>(<span class="string">'axios-mock-adapter'</span>);</span><br><span class="line"><span class="comment">//通过axios-mock-adapter生成代理api地址</span></span><br><span class="line"><span class="comment">//导入数据</span></span><br><span class="line"><span class="keyword">import</span> &#123;Users,course,schedule&#125; <span class="keyword">from</span> <span class="string">"./mock-data"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="comment">//实例化</span></span><br><span class="line">    <span class="keyword">let</span> mock = <span class="keyword">new</span> MockAdapter(axios);</span><br><span class="line"><span class="comment">//拦截带参数的请求，reply的参数为 (status, data, headers)</span></span><br><span class="line">    mock.onGet(<span class="string">'/login'</span>).reply(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> username = config.username;  <span class="comment">//存储请求数据</span></span><br><span class="line">      <span class="keyword">let</span> password = config.password;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> hasUser = (Users.username==username &amp;&amp; Users.password==password)?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">          <span class="comment">//匹配成功</span></span><br><span class="line">        <span class="keyword">if</span> (hasUser) &#123;</span><br><span class="line">          resolve([<span class="number">200</span>, &#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">msg</span>: <span class="string">'请求成功'</span> &#125;]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve([<span class="number">200</span>, &#123; <span class="attr">code</span>: <span class="number">500</span>, <span class="attr">msg</span>: <span class="string">'账号或密码错误'</span> &#125;]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截没有参数的请求</span></span><br><span class="line">    mock.onGet(<span class="string">'/card'</span>).reply(<span class="number">200</span>, &#123;</span><br><span class="line">      LoginUsers: LoginUsers     <span class="comment">//返回的对象</span></span><br><span class="line">    &#125;);</span><br><span class="line">    mock.onGet(<span class="string">'/plan'</span>).reply(<span class="number">200</span>, &#123;</span><br><span class="line">      course: course</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过管理请求（data-api-js）"><a href="#通过管理请求（data-api-js）" class="headerlink" title="通过管理请求（data / api.js）"></a>通过管理请求（<strong>data / api.js</strong>）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统一管理axios所有的请求</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">let</span> base = <span class="string">''</span>;  <span class="comment">//$&#123;base&#125;/xx 为路径</span></span><br><span class="line"><span class="comment">//获取登录信息 </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> requestLogin = <span class="function"><span class="params">params</span> =&gt;</span> axios.get(<span class="string">`<span class="subst">$&#123;base&#125;</span>/login`</span>,params).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data);</span><br><span class="line"><span class="comment">//获取卡片信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> cardMessage = <span class="function"><span class="params">params</span> =&gt;</span> axios.get(<span class="string">`<span class="subst">$&#123;base&#125;</span>/card`</span>,params).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data);</span><br><span class="line"><span class="comment">//获取培养计划</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getPlan = <span class="function"><span class="params">params</span> =&gt;</span> axios.get(<span class="string">`<span class="subst">$&#123;base&#125;</span>/plan`</span>,params).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data);</span><br><span class="line"><span class="comment">//获取课程表</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> schedule = <span class="function"><span class="params">params</span> =&gt;</span> axios.get(<span class="string">`<span class="subst">$&#123;base&#125;</span>/schedule`</span>,params).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data);</span><br></pre></td></tr></table></figure><h2 id="使用请求"><a href="#使用请求" class="headerlink" title="使用请求"></a>使用请求</h2><p>首先引入api文件<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;requestLogin&#125; <span class="keyword">from</span> <span class="string">'../../data/api'</span></span><br></pre></td></tr></table></figure></p><p>然后在有需要的地方使用引入的方法<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"Login"</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      test: &#123;</span><br><span class="line">        name: <span class="string">'USER3114001996'</span>,</span><br><span class="line">        region: <span class="string">'123456'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      checked: <span class="literal">true</span>,</span><br><span class="line">      loading:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    enter()&#123;</span><br><span class="line">      <span class="keyword">this</span>.loading = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">//发送axios请求并且传递用户参数</span></span><br><span class="line">      <span class="keyword">let</span> loginParams = &#123; <span class="attr">username</span>: <span class="keyword">this</span>.test.name, <span class="attr">password</span>: <span class="keyword">this</span>.test.region &#125;;</span><br><span class="line">      requestLogin(loginParams).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; msg, code, user &#125; = data;</span><br><span class="line">        <span class="keyword">if</span>(code!==<span class="number">200</span>)&#123;</span><br><span class="line">          <span class="keyword">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">            message: msg,</span><br><span class="line">            type: <span class="string">'error'</span>,</span><br><span class="line">            duration:<span class="number">1200</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">          <span class="comment">//请求成功后跟换路径，跳转路由</span></span><br><span class="line">          <span class="keyword">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="string">'/Card'</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Vue使用手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery常用操作</title>
      <link href="/2018/06/29/jQuery--%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/06/29/jQuery--%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>收集和整合jquery常用操作，便于快速查询和使用，提升开发效率。</p><h2 id="判断滚动条位置"><a href="#判断滚动条位置" class="headerlink" title="判断滚动条位置"></a>判断滚动条位置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($(<span class="string">'html,body'</span>).scrollTop() &gt; $(<span class="string">'.sect1'</span>).height()) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="导航按钮"><a href="#导航按钮" class="headerlink" title="导航按钮"></a>导航按钮</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pc端</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bodyMove</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">   $(<span class="string">"html,body"</span>).animate(&#123;</span><br><span class="line">      scrollTop: num</span><br><span class="line">   &#125;, <span class="number">400</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">'.nav'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index, el</span>) </span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> href = $(<span class="keyword">this</span>).attr(<span class="string">'data-href'</span>);</span><br><span class="line">    bodyMove($(href).offset().top);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//zepto没有animate</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bodyMove</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"html,body"</span>).scrollTop(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取鼠标位置"><a href="#获取鼠标位置" class="headerlink" title="获取鼠标位置"></a>获取鼠标位置</h2><p>screenX：相对于<code>屏幕</code>的坐标</p><p>clientX：相对于<code>浏览器内容区域</code>的坐标（不包括滚动条隐藏的部分）</p><p>pageX：相对于<code>页面文档</code>的坐标，和浏览器宽高无关</p><p>offsetX：相对于<code>盒子模型</code>里面的坐标，和浏览器宽高无关</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCoordinates</span>(<span class="params">e,t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> site = &#123;</span><br><span class="line">        x:e[t+<span class="string">'X'</span>],</span><br><span class="line">        y:e[t+<span class="string">'Y'</span>],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">'body'</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(getCoordinates(event,<span class="string">'client'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="选择同辈元素"><a href="#选择同辈元素" class="headerlink" title="选择同辈元素"></a>选择同辈元素</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//zepto和jquery均适用</span></span><br><span class="line">$(<span class="string">'.box'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).addClass(<span class="string">'active'</span>).siblings().removeClass(<span class="string">'active'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="对元素进行判断"><a href="#对元素进行判断" class="headerlink" title="对元素进行判断"></a>对元素进行判断</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!$(<span class="string">'.nav'</span>).length) &#123;&#125;        <span class="comment">//检测元素是否存在</span></span><br><span class="line"><span class="keyword">if</span> (!$(<span class="string">'.key'</span>).html()) &#123;&#125;        <span class="comment">//检测元素是否为空（不包括自身）</span></span><br><span class="line"><span class="keyword">if</span> (!$(<span class="string">'.key'</span>).is(<span class="string">':empty'</span>)) &#123;&#125;  <span class="comment">//检测元素是否为空（包括自身）</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> jQuery使用手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>弹窗组件</title>
      <link href="/2018/06/14/TX-%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6/"/>
      <url>/2018/06/14/TX-%E5%BC%B9%E7%AA%97%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>为了增强团队的协作和高效开发，提升代码质量 ，综合整理解决方案。</p><h3 id="在文档底部添加引用"><a href="#在文档底部添加引用" class="headerlink" title="在文档底部添加引用"></a>在文档底部添加引用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//ossweb-img.qq.com/images/js/comm/showDialog.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pop"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:showDialog.hide()"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">onclick</span>=<span class="string">"PTTSendClick('btn','close','关闭弹窗');"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>弹窗的高度一般不要超过<code>550px</code><br>为每一个弹窗添加特定的<code>id</code>,方便调用以及更改样式<br>写样式之前，对弹窗相同样式进行抽取，<strong>具体到不同的弹窗具体修改</strong>，参考代码如下</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*------popCom------*/</span></span><br><span class="line"><span class="selector-class">.pop</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6.6rem</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">3.3rem</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(ossweb-img/pop-bg.png) repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pop</span> <span class="selector-class">.close</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0.2rem</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0.2rem</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0.26rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0.26rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(ossweb-img/close.png) no-repeat center;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ways */</span></span><br><span class="line"><span class="selector-id">#ways</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3.6rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#ways</span> <span class="selector-class">.title</span>&#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.65rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示弹窗"><a href="#显示弹窗" class="headerlink" title="显示弹窗"></a>显示弹窗</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">showDialog.show(<span class="string">'id'</span>);  <span class="comment">//对于不同弹窗，更换不同的id即可</span></span><br></pre></td></tr></table></figure><h3 id="隐藏弹窗"><a href="#隐藏弹窗" class="headerlink" title="隐藏弹窗"></a>隐藏弹窗</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">showDialog.hide();</span><br></pre></td></tr></table></figure><h3 id="是否可滚屏"><a href="#是否可滚屏" class="headerlink" title="是否可滚屏"></a>是否可滚屏</h3><p>当弹窗出现时屏幕是否可以滚动，取决于客户需求，参看代码<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'body,html'</span>).css(<span class="string">'overflowY'</span>, <span class="string">'hidden'</span>); <span class="comment">//隐藏滚动条，弹窗初始化启用</span></span><br><span class="line">$(<span class="string">'body,html'</span>).css(<span class="string">'overflowY'</span>, <span class="string">'auto'</span>);   <span class="comment">//显示滚动条，弹窗关闭后启用</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> TX-解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 供应商 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>兼容措施</title>
      <link href="/2018/06/13/CSS%E6%89%8B%E5%86%8C--%E5%85%BC%E5%AE%B9%E6%8E%AA%E6%96%BD/"/>
      <url>/2018/06/13/CSS%E6%89%8B%E5%86%8C--%E5%85%BC%E5%AE%B9%E6%8E%AA%E6%96%BD/</url>
      <content type="html"><![CDATA[<h2 id="透明度opcaity"><a href="#透明度opcaity" class="headerlink" title="透明度opcaity "></a>透明度<code>opcaity</code> <copy></copy></h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ele</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">Alpha</span>(opacity=100);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="让ie低版本支持inlline-block"><a href="#让ie低版本支持inlline-block" class="headerlink" title="让ie低版本支持inlline-block "></a>让ie低版本支持<code>inlline-block</code> <copy></copy></h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ele</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  *display: inline;</span><br><span class="line">  *<span class="selector-tag">zoom</span>: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决Chrome在应用transition时页面闪动的问题？"><a href="#解决Chrome在应用transition时页面闪动的问题？" class="headerlink" title="解决Chrome在应用transition时页面闪动的问题？ "></a>解决Chrome在应用transition时页面闪动的问题？ <copy></copy></h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-transform-style</span><span class="selector-pseudo">:preserve-3d</span>;</span><br><span class="line"><span class="comment">/* 或者 */</span></span><br><span class="line"><span class="selector-tag">-webkit-backface-visibility</span><span class="selector-pseudo">:hidden</span>;</span><br></pre></td></tr></table></figure><h2 id="解决移动端的滑动事件总是出现无法侦听被动事件"><a href="#解决移动端的滑动事件总是出现无法侦听被动事件" class="headerlink" title="解决移动端的滑动事件总是出现无法侦听被动事件"></a>解决移动端的滑动事件总是出现无法侦听被动事件</h2><p>在使用有些移动端插件时，如果使用了滑动事件，可能会包报错 <copy></copy></p><p><code>Unable to preventDefault inside passive event listener due to target being treated as passive</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123; <span class="attribute">touch-action</span>: none; &#125;</span><br></pre></td></tr></table></figure><h2 id="flex垂直居中兼容性写法"><a href="#flex垂直居中兼容性写法" class="headerlink" title="flex垂直居中兼容性写法 "></a>flex垂直居中兼容性写法 <copy></copy></h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex</span>&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">  <span class="attribute">-ms-flex-pack</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: center;</span><br><span class="line">  <span class="attribute">-ms-flex-align</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CSS手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS兼容 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>flex布局</title>
      <link href="/2018/06/05/flex%E5%B8%83%E5%B1%80/"/>
      <url>/2018/06/05/flex%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<p>弹性布局是未来布局的发展趋势，现代浏览器均对flex实现了不同程度的支持，但是如果要兼容老版本的浏览器，则还是应该回归原始的布局方式。<br><a id="more"></a></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="容器和项目"><a href="#容器和项目" class="headerlink" title="容器和项目"></a>容器和项目</h3><p>弹性布局的实现需要一个容器，也就是flex容器。只要把父元素的<code>display</code>设置为<code>flex</code>，则他的子元素就全部成为了flex项目</p><h3 id="主轴和交叉轴"><a href="#主轴和交叉轴" class="headerlink" title="主轴和交叉轴"></a>主轴和交叉轴</h3><p>主轴（<code>main axis</code>）处于水平方向，是<code>x</code>轴。起点叫<code>main start</code>，终点叫做<code>main end</code>。<br>交叉轴（<code>cross axis</code>）处于垂直方向，是<code>y</code>轴。起点叫<code>cross start</code>，终点叫做<code>cross end</code>。<br><img src="http://www.runoob.com/wp-content/uploads/2015/07/3791e575c48b3698be6a94ae1dbff79d.png" alt="flex布局"></p><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction  "></a><code>flex-direction</code>  <copy></copy></h3><p>该属性决定项目的拍排列方向,有:<br>水平方向：<code>row</code>（从左到右），<code>row-reverse</code>（从右到左）;<br>垂直方向：<code>column</code>（从上到下），<code>column-reverse</code>（从下到上）<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column|column-reverse|row|row-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://miao.su/images/2018/06/05/0cbe5f8268121114e87d0546e53cda6e2131a.png" alt="0cbe5f8268121114e87d0546e53cda6e2131a.png"></p><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a><code>flex-wrap</code></h3><p>改属性决定了项目溢出容器时候的处理方式，默认是自动收缩不换行（<code>nowrap</code>）<br>不换行，水平方向自动收缩：<code>nowrap</code><br><img src="https://miao.su/images/2018/06/05/nowrap18e54.png" alt="nowrap18e54.png"><br>换行：<code>warp</code><br><img src="https://miao.su/images/2018/06/05/wrap95d91.png" alt="wrap95d91.png"><br>换行之后反向：<code>wrap-reverse</code><br><img src="https://miao.su/images/2018/06/05/wrap-reverse6c2a3.png" alt="wrap-reverse6c2a3.png"></p><blockquote><p>如果设置了项目的宽度，并且项目的<code>总宽度之和&gt;容器的宽度</code>，在设置了不换行<code>nowarp</code>的情况下，<code>项目宽度</code>会被<code>自动压缩</code>，不超过容器范围</p></blockquote><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a><code>flex-flow</code></h3><p>是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。<br>优先使用这个属性。</p><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a><code>justify-content</code></h3><p>该属性决定项目在主轴(<code>x轴</code>)上的对其方式  <copy><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">   <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></copy></p><p><img src="https://miao.su/images/2018/06/05/wsdsaa727.png" alt="wsdsaa727.png"><br>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><ul><li><code>flex-start（默认值）</code>：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items   "></a><code>align-items</code>   <copy></copy></h3>该属性决定项目在交叉轴(<code>y轴</code>)上的对其方式 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://miao.su/images/2018/06/05/baseline1286d.png" alt="baseline1286d.png"><br>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch（默认值）</code>：如果项目未设置高度或设为auto，将占满整个容器的高度。<div class="tip"><br>  尤其要注意，如果项目没有设置具体高度，那么他会默认<code>填充满容器</code><br></div></li></ul><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a><code>align-content</code></h3><p>多轴属性，当换行的时候，会有多个主轴或者交叉轴的存在。该属性和主轴对其方式是一致的。  <copy><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></copy></p><p><img src="https://miao.su/images/2018/06/05/js64812.png" alt="js64812.png"></p><h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a><code>order</code></h3><p>排列顺序。数值越小，排列越靠前，默认为0  <copy><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></copy></p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a><code>flex-grow</code></h3><p>放大比例，默认为0，即如果存在剩余空间，也不放大  <copy><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></copy></p><blockquote><p>如果一个项目的<code>flex-grow</code>属性为<code>2</code>，其他项目都为<code>1</code>，则前者占据的剩余空间将比其他项多一倍。</p></blockquote><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a><code>flex-shrink</code></h3><p>缩小比例，默认为1，即如果空间不足，该项目将缩小  <copy><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></copy></p><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a><code>flex-basis</code></h3><p>分配多余空间之前，项目占据的主轴空间（<code>main size</code>），也就是固定宽度  <copy><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></copy></p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a><code>flex</code></h3><p> 是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值<code>0 1 auto</code>。后两个属性可选</p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a><code>align-self</code></h3><p> 单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性<br><img src="https://miao.su/images/2018/06/05/TIM201806051153463325d.png" alt="TIM201806051153463325d.png"></p><h2 id="小实例"><a href="#小实例" class="headerlink" title="小实例"></a>小实例</h2><p>用弹性布局实现百分比高度的文字垂直居中</p><p><iframe width="100%" height="160" src="http://jsrun.net/LSZKp/embedded/all/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe><br>考虑到浏览器的兼容性差异，最好flex相关属性都加上浏览器内核前缀</p>]]></content>
      
      <categories>
          
          <category> 弹性布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>视频弹窗</title>
      <link href="/2018/03/15/TX-%E8%A7%86%E9%A2%91%E6%8F%92%E4%BB%B6/"/>
      <url>/2018/03/15/TX-%E8%A7%86%E9%A2%91%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>为了增强团队的协作和高效开发，提升代码质量 ，综合整理解决方案。</p><a id="more"></a><h2 id="PC视频"><a href="#PC视频" class="headerlink" title="PC视频"></a>PC视频</h2><h3 id="引用视频组件"><a href="#引用视频组件" class="headerlink" title="引用视频组件"></a>引用视频组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//ossweb-img.qq.com/images/js/comm/showDialog.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//vm.gtimg.cn/tencentvideo/txp/js/txplayer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结构样式及调用"><a href="#结构样式及调用" class="headerlink" title="结构样式及调用"></a>结构样式及调用</h3><p>html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视频弹窗 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pop"</span> <span class="attr">id</span>=<span class="string">"vindex-play"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn-pop-close"</span> <span class="attr">onclick</span>=<span class="string">"hideVideo();"</span> <span class="attr">title</span>=<span class="string">"点击关闭"</span> <span class="attr">onclick</span>=<span class="string">"PTTSendClick('btn','close','关闭弹窗');"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pop-con"</span> <span class="attr">id</span>=<span class="string">"vplay-con"</span> <span class="attr">style</span>=<span class="string">"padding-top: 0"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*--------video---------*/</span></span><br><span class="line"><span class="selector-id">#vindex-play</span> &#123;<span class="attribute">position</span>:relative;<span class="attribute">display</span>: none;<span class="attribute">width</span>:<span class="number">800px</span>;<span class="attribute">height</span>:<span class="number">500px</span>;<span class="attribute">padding-top</span>: <span class="number">0</span>;<span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#e9d7a5</span>;<span class="attribute">background</span>: none;&#125;</span><br><span class="line"><span class="selector-id">#vindex-play</span> <span class="selector-class">.btn-pop-close</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:-<span class="number">2px</span>;<span class="attribute">right</span>:-<span class="number">41px</span>;<span class="attribute">display</span>:block;<span class="attribute">width</span>:<span class="number">40px</span>;<span class="attribute">height</span>:<span class="number">40px</span>;<span class="attribute">cursor</span>: pointer;<span class="attribute">text-align</span>:center;<span class="attribute">text-decoration</span>: none;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">background-color</span>: <span class="number">#e9d7a5</span>;<span class="attribute">font-family</span>:Tahoma;<span class="attribute">font-size</span>:<span class="number">30px</span>;<span class="attribute">line-height</span>:<span class="number">36px</span>;&#125;</span><br><span class="line"><span class="selector-id">#vindex-play</span> <span class="selector-class">.btn-pop-close</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">text-decoration</span>:none;<span class="attribute">color</span>:<span class="number">#fff</span>;&#125;</span><br><span class="line"><span class="selector-id">#vindex-play</span> <span class="selector-class">.pop-con</span>,<span class="selector-id">#vindex-play</span> <span class="selector-class">.pop-con</span> <span class="selector-class">.tenvideo_player</span>&#123;<span class="attribute">width</span>: <span class="number">800px</span>;<span class="attribute">height</span>: <span class="number">500px</span>;&#125;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pc视频弹窗方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">playVideo</span>(<span class="params">e,vid</span>) </span>&#123;</span><br><span class="line">  showDialog.show(&#123;<span class="attr">id</span>:e&#125;);  <span class="comment">//e为弹窗,vid为视频编码</span></span><br><span class="line">  <span class="keyword">var</span> player = <span class="keyword">new</span> Txplayer(&#123;</span><br><span class="line">    containerId: <span class="string">'vplay-con'</span>,</span><br><span class="line">    vid: vid,</span><br><span class="line">    width: <span class="string">'100%'</span>,</span><br><span class="line">    height: <span class="string">'100%'</span>,</span><br><span class="line">    autoplay: <span class="literal">false</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭pc视频弹窗方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hideVideo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> flv_s = <span class="built_in">document</span>.getElementById(<span class="string">"vplay-con"</span>);</span><br><span class="line">  <span class="keyword">if</span> (flv_s)&#123;</span><br><span class="line">    flv_s.innerHTML= <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   showDialog.hide();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onclick=<span class="string">"playVideo('vindex-play','q0625wf8pcn')"</span></span><br></pre></td></tr></table></figure><h2 id="H5视频"><a href="#H5视频" class="headerlink" title="H5视频"></a>H5视频</h2><h3 id="引用视频组件-1"><a href="#引用视频组件-1" class="headerlink" title="引用视频组件"></a>引用视频组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//ossweb-img.qq.com/images/js/comm/showDialog.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//imgcache.gtimg.cn/tencentvideo_v1/tvp/js/tvp.player_v2.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结构样式及调用-1"><a href="#结构样式及调用-1" class="headerlink" title="结构样式及调用"></a>结构样式及调用</h3><p>html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视频弹窗 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"videoPlayer"</span> <span class="attr">class</span>=<span class="string">"video_player"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">id</span>=<span class="string">"videoClose"</span> <span class="attr">class</span>=<span class="string">"video_close"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*--------video---------*/</span></span><br><span class="line"><span class="comment">/*--------video--------*/</span></span><br><span class="line"><span class="selector-class">.video_close</span>&#123;<span class="attribute">width</span>: <span class="number">0.6rem</span>;<span class="attribute">height</span>: <span class="number">0.6rem</span>;<span class="attribute">color</span>: <span class="number">#d2b853</span>;<span class="attribute">font-size</span>: <span class="number">0.6rem</span>;<span class="attribute">line-height</span>: <span class="number">0.6rem</span>;&#125;</span><br><span class="line"><span class="selector-class">.video_player</span> &#123;<span class="attribute">position</span>: fixed;<span class="attribute">z-index</span>: <span class="number">10011</span>;<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">display</span>: none;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">background</span>: <span class="number">#000</span>;&#125;</span><br><span class="line"><span class="selector-class">.video_close</span> &#123;<span class="attribute">position</span>: fixed;<span class="attribute">z-index</span>: <span class="number">10014</span>;<span class="attribute">top</span>: <span class="number">2%</span>;<span class="attribute">right</span>: <span class="number">2%</span>;<span class="attribute">display</span>: none;<span class="attribute">width</span>: <span class="number">0.6rem</span>;<span class="attribute">width</span>: <span class="number">0.4rem</span>;<span class="attribute">height</span>: <span class="number">0.6rem</span>;<span class="attribute">height</span>: <span class="number">0.4rem</span>;<span class="attribute">text-align</span>: center;<span class="attribute">color</span>: <span class="number">#d2b853</span>;<span class="attribute">color</span>: <span class="number">#0091de</span>;<span class="attribute">background</span>: <span class="number">#000</span>;<span class="attribute">font-size</span>: <span class="number">0.6rem</span>;<span class="attribute">font-size</span>: <span class="number">0.8rem</span>;<span class="attribute">font-weight</span>: <span class="number">700</span>;<span class="attribute">line-height</span>: <span class="number">0.6rem</span>;&#125;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//视频</span></span><br><span class="line"><span class="keyword">var</span> showVideo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> video = <span class="keyword">new</span> tvp.VideoInfo();</span><br><span class="line">  video.setVid(vid);  <span class="comment">//视频码</span></span><br><span class="line">  <span class="keyword">var</span> player = <span class="keyword">new</span> tvp.Player();</span><br><span class="line">    player.create(&#123;</span><br><span class="line">    width:<span class="string">"100%"</span>,</span><br><span class="line">    height:<span class="string">"100%"</span>,</span><br><span class="line">    video:video,</span><br><span class="line">    modId:<span class="string">"videoPlayer"</span>,</span><br><span class="line">    isHtml5UseAirPlay:<span class="literal">true</span>,</span><br><span class="line">    isHtml5UseFakeFullScreen:<span class="literal">true</span>,</span><br><span class="line">    autoplay:<span class="literal">false</span></span><br><span class="line">  &#125;);</span><br><span class="line">    $(<span class="string">'#videoPlayer'</span>).show();</span><br><span class="line">    $(<span class="string">'#videoClose'</span>).show();</span><br><span class="line">&#125;;</span><br><span class="line">$(<span class="string">'#videoClose'</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">'#videoPlayer'</span>).hide().html(<span class="string">" "</span>);</span><br><span class="line">  $(<span class="string">'#videoClose'</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onclick=<span class="string">"showVideo('r0539nr9q6d');"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> TX-解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 供应商 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>H5端构建</title>
      <link href="/2018/03/14/TX-%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
      <url>/2018/03/14/TX-%E7%A7%BB%E5%8A%A8%E7%AB%AF/</url>
      <content type="html"><![CDATA[<h2 id="结构样式"><a href="#结构样式" class="headerlink" title="结构样式"></a>结构样式</h2><p>为了增强团队的协作和高效开发，提升代码质量 ，综合整理解决方案。</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><a id="more"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sect sect1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sect sect2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sect1</span>&#123;<span class="attribute">height</span>: <span class="number">2rem</span>;<span class="attribute">background</span>: <span class="built_in">url</span>() no-repeat center top&#125;</span><br><span class="line"><span class="selector-class">.sect2</span>&#123;<span class="attribute">height</span>: <span class="number">3rem</span>;<span class="attribute">background</span>: <span class="built_in">url</span>() no-repeat center top&#125;</span><br><span class="line"><span class="selector-class">.sect</span>&#123;<span class="attribute">position</span>:relative;<span class="attribute">margin</span>: <span class="number">0</span> auto;<span class="attribute">overflow</span>: hidden;<span class="attribute">background-size</span>: <span class="number">100%</span>;<span class="attribute">width</span>:<span class="number">7.5rem</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="组件上报"><a href="#组件上报" class="headerlink" title="组件上报"></a>组件上报</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ontouchend=<span class="string">"PTTSendClick('btn','back','返回官网')"</span></span><br></pre></td></tr></table></figure><h2 id="分离路径"><a href="#分离路径" class="headerlink" title="分离路径"></a>分离路径</h2><p>传奇霸业:<code>//game.gtimg.cn/images/cqby/cp/a20180223bsdm/</code><br>御龙在天:<code>//game.gtimg.cn/images/ylzt/cp/a20180124jymtm/</code><br>传奇世界:<code>//game.gtimg.cn/images/cqsj3d/cp/a20180223bsdm/</code><br>梦幻诛仙:<code>//game.gtimg.cn/images/mhzx/cp/a20180418gcwfm/</code><br>轩辕传奇:<code>//game.gtimg.cn/images/xycq/cp/a20180423jyxtm/</code><br>QQ炫舞: <code>//game.gtimg.cn/images/x5m/cp/a20180516bbztm/</code></p><h2 id="链接跳转"><a href="#链接跳转" class="headerlink" title="链接跳转"></a>链接跳转</h2><p>传霸官网:<code>//shuang.qq.com/m/main.shtml</code><br>御龙官网:<code>//ylzt.qq.com/m/</code><br>传世官网:<code>//3d.qq.com/</code><br><a href="//buluo.qq.com/p/barindex.html?bid=399251">传世兴趣部落</a> /<a href="//bbs.g.qq.com/forum-57808-1.html">传世游戏论坛</a> /<a href="//game.weixin.qq.com/cgi-bin/comm/openlink?noticeid=90127011&amp;appid=wx96a8b9ae096de54d&amp;url=https%3A%2F%2Fgame.weixin.qq.com%2Fcgi-bin%2Fh5%2Fstatic%2Fsubscribe%2Findex.html%3Fappid%3Dwx96a8b9ae096de54d#wechat_redirect">传世公众号</a> /<a href="//weibo.com/u/6077836537?refer_flag=1001030101_">传世微博</a><br>梦诛官网:<code>//mhzx.qq.com/m/index.shtml</code><br>轩辕官网:<code>//xycq.qq.com/m/</code><br>炫舞官网:<code>//x5m.qq.com/m/m201711/index.html</code></p>]]></content>
      
      <categories>
          
          <category> TX-解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 供应商 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微区构建</title>
      <link href="/2018/03/13/TX-%E5%BE%AE%E7%A4%BE%E5%8C%BA/"/>
      <url>/2018/03/13/TX-%E5%BE%AE%E7%A4%BE%E5%8C%BA/</url>
      <content type="html"><![CDATA[<h2 id="结构样式"><a href="#结构样式" class="headerlink" title="结构样式"></a>结构样式</h2><p>为了增强团队的协作和高效开发，提升代码质量 ，综合整理解决方案。</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><a id="more"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sect sect1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sect sect2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sect1</span>&#123;<span class="attribute">height</span>: <span class="number">2rem</span>;<span class="attribute">background</span>: <span class="built_in">url</span>() no-repeat center top&#125;</span><br><span class="line"><span class="selector-class">.sect2</span>&#123;<span class="attribute">height</span>: <span class="number">3rem</span>;<span class="attribute">background</span>: <span class="built_in">url</span>() no-repeat center top&#125;</span><br><span class="line"><span class="selector-class">.sect</span>&#123;<span class="attribute">position</span>:relative;<span class="attribute">margin</span>: <span class="number">0</span> auto;<span class="attribute">overflow</span>: hidden;<span class="attribute">background-size</span>: <span class="number">100%</span>;<span class="attribute">width</span>:<span class="number">7.5rem</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="组件上报"><a href="#组件上报" class="headerlink" title="组件上报"></a>组件上报</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ontouchend=<span class="string">"PTTSendClick('btn','back','返回官网')"</span></span><br></pre></td></tr></table></figure><h2 id="分离路径"><a href="#分离路径" class="headerlink" title="分离路径"></a>分离路径</h2><p>御龙在天:<code>//game.gtimg.cn/images/ylzt/ingame/act/a20180117jmyc/</code><br>梦幻诛仙:<code>//game.gtimg.cn/images/mhzx/ingame/act/a20180418gcwf/</code><br>QQ炫舞: <code>//game.gtimg.cn/images/x5m/ingame/act/a20180516bbztm/</code></p><h2 id="链接跳转"><a href="#链接跳转" class="headerlink" title="链接跳转"></a>链接跳转</h2><p>御龙官网:<code>//ylzt.qq.com/ingame/all/index.shtml</code><br>梦诛官网:<code>//mhzx.qq.com/ingame/all/topic.shtml</code><br>炫舞官网:<code>//x5m.qq.com/ingame/all/index.shtml</code></p>]]></content>
      
      <categories>
          
          <category> TX-解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 供应商 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PC端构建</title>
      <link href="/2018/03/11/TX-PC%E7%AB%AF/"/>
      <url>/2018/03/11/TX-PC%E7%AB%AF/</url>
      <content type="html"><![CDATA[<h2 id="结构样式"><a href="#结构样式" class="headerlink" title="结构样式"></a>结构样式</h2><p>为了增强团队的协作和高效开发，提升代码质量 ，综合整理解决方案。</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><a id="more"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sect sect1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"part part1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sect</span>&#123;<span class="attribute">position</span>:relative;<span class="attribute">margin</span>: <span class="number">0</span> auto;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">min-width</span>: <span class="number">1180px</span>;&#125;</span><br><span class="line"><span class="selector-class">.part</span>&#123;<span class="attribute">overflow</span>: hidden;<span class="attribute">position</span>: relative;<span class="attribute">margin</span>: <span class="number">0</span> auto;<span class="attribute">width</span>: <span class="number">1180px</span>;&#125;</span><br><span class="line"><span class="selector-class">.sect1</span>&#123;<span class="attribute">background</span>: <span class="built_in">url</span>() no-repeat center top&#125;</span><br><span class="line"><span class="selector-class">.sect1</span> <span class="selector-class">.part1</span>&#123;<span class="attribute">height</span>: <span class="number">806px</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="组件上报"><a href="#组件上报" class="headerlink" title="组件上报"></a>组件上报</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onclick=<span class="string">"PTTSendClick('btn','back','返回官网')"</span></span><br></pre></td></tr></table></figure><h2 id="分离路径"><a href="#分离路径" class="headerlink" title="分离路径"></a>分离路径</h2><p>传奇霸业:<code>//game.gtimg.cn/images/cqby/cp/a20180223bsd/</code><br>御龙在天:<code>//game.gtimg.cn/images/ylzt/cp/a20180117jymt/</code><br>传奇世界:<code>//game.gtimg.cn/images/cqsj3d/cp/a20180223bsd/</code><br>梦幻诛仙:<code>//game.gtimg.cn/images/mhzx/cp/a20180418gcwf/</code><br>轩辕传奇:<code>//game.gtimg.cn/images/xycq/cp/a20180423jyxt/</code><br>QQ炫舞: <code>//game.gtimg.cn/images/x5m/cp/a20180517bbzt/</code></p><h2 id="链接跳转"><a href="#链接跳转" class="headerlink" title="链接跳转"></a>链接跳转</h2><p>传霸官网:<code>//shuang.qq.com/index.shtml</code><br>御龙官网:<code>//ylzt.qq.com/</code><br>传世官网:<code>//3d.qq.com/</code><br>梦诛官网:<code>//mhzx.qq.com/</code><br>轩辕官网:<code>//xycq.qq.com/</code><br>炫舞官网:<code>//x5m.qq.com/web201711/main.shtml</code></p>]]></content>
      
      <categories>
          
          <category> TX-解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 供应商 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分享蒙层</title>
      <link href="/2018/03/11/TX-%E5%88%86%E4%BA%AB%E8%92%99%E5%B1%82/"/>
      <url>/2018/03/11/TX-%E5%88%86%E4%BA%AB%E8%92%99%E5%B1%82/</url>
      <content type="html"><![CDATA[<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>针对移动设备浏览方式的差异，分为两种分享方式：右上角和下方<br>对浏览方式进行判断然后选用适合的蒙层</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 右上角分享蒙层 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"share share-right"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"share.png"</span> <span class="attr">alt</span>=<span class="string">"share"</span> <span class="attr">class</span>=<span class="string">"share-icon"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>点击右上角分享给好友<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 下方分享蒙层 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"share share-down"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>点击下方导航栏,分享给好友<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* share */</span></span><br><span class="line"><span class="selector-class">.share</span>&#123;<span class="attribute">position</span>: fixed;<span class="attribute">z-index</span>: <span class="number">2</span>;<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">display</span>: none;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">text-align</span>: center;<span class="attribute">color</span>: white;<span class="attribute">background</span>: <span class="built_in">rgba</span>(12, 12, 12, 0.91);<span class="attribute">font-size</span>: <span class="number">0.4rem</span>;&#125;</span><br><span class="line"><span class="selector-class">.share-right</span> <span class="selector-tag">p</span>&#123;<span class="attribute">margin-left</span>:<span class="number">25%</span>;&#125;</span><br><span class="line"><span class="selector-class">.share-right</span> <span class="selector-tag">img</span><span class="selector-class">.share-icon</span> &#123;<span class="attribute">width</span>: <span class="number">1.42rem</span>; <span class="attribute">margin</span>: <span class="number">12%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">58%</span>;&#125;</span><br><span class="line"><span class="selector-class">.share-down</span> <span class="selector-tag">p</span>&#123;<span class="attribute">margin-top</span>: <span class="number">90%</span>;<span class="attribute">font-size</span>: <span class="number">0.35rem</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h3><p>展开和关闭<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断分享类型</span></span><br><span class="line"><span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line"><span class="keyword">if</span> ((ua.match(<span class="regexp">/MicroMessenger/i</span>) == <span class="string">'micromessenger'</span>) || (ua.match(<span class="regexp">/QQ/i</span>) == <span class="string">"qq"</span>) || (ua.match(<span class="regexp">/WeiBo/i</span>) == <span class="string">"weibo"</span>)) &#123;</span><br><span class="line">  $(<span class="string">'.share-right'</span>).show();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  $(<span class="string">'.share-down'</span>).show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭蒙层</span></span><br><span class="line">$.each([<span class="string">'.share-right'</span>, <span class="string">'.share-down'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">index, value</span>) </span>&#123;</span><br><span class="line">  $(value).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).hide();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="分享图标"><a href="#分享图标" class="headerlink" title="分享图标"></a>分享图标</h3><p><a href="http://miao.su/images/2018/04/19/share173a4.png" target="_blank" rel="noopener">跳转下载</a></p>]]></content>
      
      <categories>
          
          <category> TX-解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 供应商 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>call和apply</title>
      <link href="/2017/09/22/JS--call%20%E5%92%8C%20apply/"/>
      <url>/2017/09/22/JS--call%20%E5%92%8C%20apply/</url>
      <content type="html"><![CDATA[<p>每个函数都有<code>call</code>和<code>apply</code>方法，可以用来改变this的指向，或者说，用<code>call</code>和<code>apply</code>来帮助对象，去调用某个函数的方法</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>比如某个对象想用它本身没有的方法，但是又不想重写，就可以使用<code>call</code>和<code>apply</code>去调用其他函数的方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p>这时候的<code>this</code>并不是一个<code>Array</code>，因为需要借用<code>Array</code>类的方法，所以使用了<code>call</code></p><p>再来看一个栗子：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  object:<span class="string">'怪兽'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> superman =&#123;</span><br><span class="line">  object:<span class="string">'鱼'</span></span><br><span class="line">&#125;</span><br><span class="line">superman.beat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.object);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//猫调用superman的beat的方法，但是它本身是没有这个方法的</span></span><br><span class="line">superman.beat.call(cat);</span><br></pre></td></tr></table></figure><h2 id="作用总结"><a href="#作用总结" class="headerlink" title="作用总结"></a>作用总结</h2><p>所以其实<code>call</code>和<code>apply</code>有两个作用</p><blockquote><p>① 改变this的指向</p><p>② 让某个对象不用重写方法去调用其他对象的方法</p></blockquote><p>—————————————————————-华丽的分割线————————————————————————</p><p>换个层面来说，其实，当一个函数作为一个对象的方法被调用的时候，<code>this</code>指向的就是这个对象，比如说</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat =&#123;</span><br><span class="line">  speak:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是猫的方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">cat.speak()</span><br></pre></td></tr></table></figure><p>所以，当使用<code>apply</code>和<code>call</code>的时候，该对象就有了新的方法。所以，为什么会改变<code>this</code>的指向，其实和上面的一样，函数作为这个对象的方法调用了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">superman.beat.call(cat);</span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line">cat.beat()</span><br><span class="line"><span class="comment">//所以this就指向了cat对象</span></span><br></pre></td></tr></table></figure><p>最后看一个栗子加深理解</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> cat =&#123;</span><br><span class="line">  a:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ani = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line">ani();   <span class="comment">//3  直接调用，this指向window</span></span><br><span class="line">ani.apply(cat)  <span class="comment">//1  作为cat的方法调用，this指向对象cat</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JS出深入浅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数组型对象的实现</title>
      <link href="/2017/09/22/JS--%E6%95%B0%E7%BB%84%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2017/09/22/JS--%E6%95%B0%E7%BB%84%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>在jQuery中，如果调用<code>$</code>函数访问一个元素，例如<code>console.log($(&#39;div&#39;));</code>，则会返回一个数组型对象。可以借助循环添加的方式实现<br><a id="more"></a></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">array = [<span class="string">'p'</span>,<span class="string">'a'</span>]</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">  o[i] = arry[i];</span><br><span class="line">&#125;</span><br><span class="line">o.length = array.length;</span><br><span class="line"><span class="built_in">console</span>.log(o);<span class="comment">//&#123;0: "p", 1: "a", length: 2&#125;</span></span><br></pre></td></tr></table></figure><p>但是在<a href="https://jquery.com/" target="_blank" rel="noopener">jQuery</a>里面，是通过数组的<code>push</code>方法来实现的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> arry = [<span class="string">'p'</span>,<span class="string">'a'</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(o,arry)</span><br><span class="line"><span class="built_in">console</span>.log(o);   <span class="comment">//&#123;0: "p", 1: "a", length: 2&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>原来apply的this指向的是数组，现在转换为对象</p></blockquote>]]></content>
      
      <categories>
          
          <category> JS出深入浅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常见的封装</title>
      <link href="/2017/08/23/JS--%E5%B8%B8%E8%A7%81%E7%9A%84%E5%B0%81%E8%A3%85/"/>
      <url>/2017/08/23/JS--%E5%B8%B8%E8%A7%81%E7%9A%84%E5%B0%81%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="命名空间（用对象的方式模拟）"><a href="#命名空间（用对象的方式模拟）" class="headerlink" title="命名空间（用对象的方式模拟）"></a>命名空间（用对象的方式模拟）</h2><p>首先用对象字面量的方式创建一个命名空间</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Game = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>添加模块，可以将相同功能或者属性的归类</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Game.module1 = &#123;<span class="attr">name</span>:<span class="string">'p'</span>,<span class="attr">m</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后调用这个模块</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Game.module1.m();</span><br></pre></td></tr></table></figure><p>可以用立即执行函数把这个命名空间包裹起来，这样可以减少变量冲突</p><h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><p>js没有块作用域，有函数作用域，把方法和属性卸载函数里面，可以减少变量冲突</p><p>对于构造器函数，包含实例化属性，自身属性，继承属性</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;    <span class="comment">//实例化属性</span></span><br><span class="line">    <span class="keyword">this</span>.public = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    <span class="comment">//实例化属性</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'this指向实例化的对象'</span>)  </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">private</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'这是私有的方法'</span>)  <span class="comment">//自身属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;     <span class="comment">//继承属性</span></span><br><span class="line">  my:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'这是可以继承方法'</span>)   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后通过<code>new</code>实现继承</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Person(<span class="string">'PETER'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(man.name);   <span class="comment">//PETER</span></span><br><span class="line"><span class="built_in">console</span>.log(man.public());  <span class="comment">//this指向实例化的对象</span></span><br><span class="line"><span class="built_in">console</span>.log(man.my());          <span class="comment">//这是可以继承方法</span></span><br><span class="line"><span class="built_in">console</span>.log(man.private());     <span class="comment">//Uncaught TypeError</span></span><br></pre></td></tr></table></figure><p>实际案例中，会用私有方法调用共有方法或者共有方法调用私有方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)  <span class="comment">//输出实例化对象的name</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.text = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'public method'</span>);</span><br><span class="line">        pm.call(<span class="keyword">this</span>);  <span class="comment">//绑定到是实例化的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> man= <span class="keyword">new</span> Person(<span class="string">'peter'</span>);</span><br><span class="line">man.text();   <span class="comment">//peter</span></span><br></pre></td></tr></table></figure><h2 id="采用对象工厂的方式"><a href="#采用对象工厂的方式" class="headerlink" title="采用对象工厂的方式"></a>采用对象工厂的方式</h2><p>核心思路：定义一个人对象，函数返回一个对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self =&#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> selft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(self.name) <span class="comment">//------→</span></span><br><span class="line">    &#125;                           <span class="comment">//      |</span></span><br><span class="line">    <span class="keyword">var</span> self =&#123;                 <span class="comment">//  ←---|</span></span><br><span class="line">        name:name,</span><br><span class="line">        text:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'publick method'</span>);</span><br><span class="line">            pm();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> self;   <span class="comment">//这个函数会返回一个对象，也就是实例化的对象继承了这个对象里面的属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Person(<span class="string">'oe'</span>);</span><br><span class="line">man.text();</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JS出深入浅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原型继承</title>
      <link href="/2017/08/22/JS-JS%E7%9A%84%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF/"/>
      <url>/2017/08/22/JS-JS%E7%9A%84%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<h2 id="JS的原型继承"><a href="#JS的原型继承" class="headerlink" title="JS的原型继承"></a>JS的原型继承</h2><p>在js中，要想创建一个对象，不是通过实例化，而是通过<strong>选择一个对象作为原型去克隆它</strong>来达到目的。<br>而且对象只能克隆函数对象里面的<code>prototype</code>属性，既是<code>Function.prototye</code>，由于只有函数才有<code>prototype</code>对象，所以，想要创建一个对象，就必须要用函数才能创建，这个函数通常被称为构造器函数。来看一下普通对象和函数对象的创建：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat= &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>对于<code>cat</code>，只是普通对象，是通过<code>Object</code>函数构造的,所以克隆了<code>Object</code>函数的<code>prototype</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat == (克隆) Object.prototype</span><br></pre></td></tr></table></figure></p><p>对于<code>demo</code>，是函数对象，比较高级，因为：</p><ul><li>它通过<code>Function</code>函数构造，克隆了<code>Function</code>函数的<code>prototype</code></li><li>同时，自己又是一个函数，也有自己的<code>prootype</code>，可以当作构造器被其他对象克隆</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">demo == (克隆) Function.prototype</span><br></pre></td></tr></table></figure><p>重点来了，函数的<code>prototype</code>，是一个对象，那么这个对象也是从其他对象克隆过来的<br>在<code>js</code>中，克隆根原型是<code>null</code>，其次是<code>Object.prototype</code>，也就是说，<strong>js所有的对象，都是通过<code>Object.prototype</code>克隆而来的</strong><br><img src="https://miao.su/images/2018/07/04/proto91beb.jpg" alt=""><br>上面这张图充分解释了js的原型继承概念，可以分几部去总结：</p><ul><li>普通对象克隆了<code>Object.prototype</code>，函数对象克隆了<code>Function.prototype</code></li><li><code>Object.prototype</code>的<code>Object</code>函数，它也克隆了<code>Function.prototype</code></li><li><code>Function</code>对象克隆了自己的<code>prototype</code></li><li><code>Function.prototype</code>这个对象，反过来克隆了<code>Object</code>函数的<code>Object.prototype</code>，所以最终的根克隆对象，其实就是<code>Object.prototype</code>，在它上面，是一个<code>null</code>，没有任何克隆的内容</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>)== <span class="built_in">Function</span>.prototype);  <span class="comment">//ture</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Function</span>.prototype)== <span class="built_in">Object</span>.prototype);     <span class="comment">//ture</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Function</span>)== <span class="built_in">Function</span>.prototype);     <span class="comment">//ture</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype)== <span class="literal">null</span>); <span class="comment">//ture</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JS出深入浅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>继承</title>
      <link href="/2017/08/22/JS--%E7%BB%A7%E6%89%BF/"/>
      <url>/2017/08/22/JS--%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<h2 id="通过ES5的-Object-create实现"><a href="#通过ES5的-Object-create实现" class="headerlink" title="通过ES5的 Object.create实现"></a>通过ES5的 <code>Object.create</code>实现</h2><h3 id="创建父类"><a href="#创建父类" class="headerlink" title="创建父类"></a>创建父类</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.headCount = <span class="number">1</span>;</span><br><span class="line">Parent.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'eat'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="创建子类"><a href="#创建子类" class="headerlink" title="创建子类"></a>创建子类</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Children.prototype.language = <span class="string">'javascript'</span>;</span><br><span class="line">Children.prototype.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'work'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建立关系，修正构造器"><a href="#建立关系，修正构造器" class="headerlink" title="建立关系，修正构造器"></a>建立关系，修正构造器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Children.prototype = <span class="built_in">Object</span>.create(Parent.prototype);</span><br><span class="line">Children.prototype.constructor = Children;</span><br></pre></td></tr></table></figure><h3 id="调整顺序"><a href="#调整顺序" class="headerlink" title="调整顺序"></a>调整顺序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.headCount = <span class="number">1</span>;</span><br><span class="line">Parent.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'eat'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//关联修正，调整顺序</span></span><br><span class="line">Children.prototype = <span class="built_in">Object</span>.create(Parent.prototype);</span><br><span class="line">Children.prototype.constructor = Children;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Children.prototype.language = <span class="string">'javascript'</span>;</span><br><span class="line">Children.prototype.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'work'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="自己写一个函数"><a href="#自己写一个函数" class="headerlink" title="自己写一个函数"></a>自己写一个函数</h2><p>步骤也是先定义父类和子类，然后建立关系，修正顺序，不过建立关系函数有所变化</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatEx</span>(<span class="params">c,p</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    F.prototype = p.prototype;</span><br><span class="line">    c.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    c.prototype.constructor = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于函数的关联，思路是把<code>c.prototype</code>和<code>p.prototype</code>连接起来，然后通过new实例化c产生的对象久可以同时使用c和p的方法和属性</p></blockquote><h2 id="如果子类要访问父类中的动态变量，比如this-name，改如何解决？"><a href="#如果子类要访问父类中的动态变量，比如this-name，改如何解决？" class="headerlink" title="如果子类要访问父类中的动态变量，比如this.name，改如何解决？"></a>如果子类要访问父类中的动态变量，比如<code>this.name</code>，改如何解决？</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">Parent.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>)  <span class="comment">//调用Parent，同时this绑定为该Children函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://miao.su/images/2018/02/09/9ddcbfc21a1fbda1c58de.png" alt="9ddcbfc21a1fbda1c58de.png"></p>]]></content>
      
      <categories>
          
          <category> JS出深入浅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>arguments和重载</title>
      <link href="/2017/08/21/JS--arguments/"/>
      <url>/2017/08/21/JS--arguments/</url>
      <content type="html"><![CDATA[<p>函数被调用的时候，会接收两个附加参数，<code>this</code>和<code>arguments</code>。</p><p><code>arguments</code>是一个对象。当<code>arguments</code>（实参）和<code>parameters</code>（形参）的个数不匹配时，不会导致错误，多余的实参会被忽略。<br><a id="more"></a></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cat</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(cat.length); <span class="comment">//函数的形参个数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);   <span class="comment">//函数的实参个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>比如要实现一个求和的函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ad = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">    ad += <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//6</span></span><br></pre></td></tr></table></figure><h2 id="当实参类型不一样时候的处理"><a href="#当实参类型不一样时候的处理" class="headerlink" title="当实参类型不一样时候的处理"></a>当实参类型不一样时候的处理</h2><p>假设有一段<code>p</code>标签。同时改变字体颜色大小等书写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span>  ele = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'text'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">//如果时对象类型</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">0</span>] == <span class="string">'object'</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(key <span class="keyword">in</span> <span class="built_in">arguments</span>[<span class="number">0</span>])&#123;</span><br><span class="line">      ele.style[key] = <span class="built_in">arguments</span>[<span class="number">0</span>][key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ele.style.fontSize = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    ele.style.backgroundColor = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">change(<span class="string">'44px'</span>,<span class="string">'red'</span>)</span><br><span class="line">change(&#123;<span class="attr">fontSize</span>:<span class="string">'44px'</span>,<span class="attr">backgroundColor</span>:<span class="string">'green'</span>&#125;)</span><br></pre></td></tr></table></figure><div class="tip"><br>    当一个对象属性是动态值的时候，不能通过<code>.</code>访问，只能通过<code>[]</code>访问<br></div>]]></content>
      
      <categories>
          
          <category> JS出深入浅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>对象的关联</title>
      <link href="/2017/08/15/JS--%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%B3%E8%81%94/"/>
      <url>/2017/08/15/JS--%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%B3%E8%81%94/</url>
      <content type="html"><![CDATA[<p>JS的数据类型有两种：</p><ul><li>原始类型（string、boolean、number、null、undefined）</li><li>对象类型（object）<a id="more"></a></li></ul><h2 id="对象之间的关联，可以通过Object-creat-来创建"><a href="#对象之间的关联，可以通过Object-creat-来创建" class="headerlink" title="对象之间的关联，可以通过Object.creat()来创建"></a>对象之间的关联，可以通过<code>Object.creat()</code>来创建</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  something:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="built_in">Object</span>.create(foo);</span><br><span class="line">bar.something(); <span class="comment">//hello</span></span><br></pre></td></tr></table></figure><p><code>Object.create(...)</code>会创建一个新对象（bar）并把它关联到我们指定的对象（foo）</p><blockquote><p>用这种方式关联对象，可以充分发挥Prototype机制的威力，同时避免不必要的麻烦（<strong>比如使用new的构造函数调用会生成.prototype和.constructor引用</strong>）</p></blockquote><h2 id="解决旧IE无法使用Object-creat-的问题"><a href="#解决旧IE无法使用Object-creat-的问题" class="headerlink" title="解决旧IE无法使用Object.creat()的问题"></a>解决旧IE无法使用<code>Object.creat()</code>的问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Object</span>.creat)&#123;</span><br><span class="line">  <span class="built_in">Object</span>.creat = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    F.prototype = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> <code>Object.create(null)</code>会创建一个没有原型链的对象，这种特殊的空[[prototyepe]]对象被称为“字典”，他们完全不会受到原型链的干扰，因此特别适合用来<strong>存储数据</strong></p></blockquote>]]></content>
      
      <categories>
          
          <category> JS出深入浅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>prototype 和 __proto__</title>
      <link href="/2017/08/15/JS--prototype%20%E5%92%8C%20__proto__/"/>
      <url>/2017/08/15/JS--prototype%20%E5%92%8C%20__proto__/</url>
      <content type="html"><![CDATA[<h2 id="关于prototype"><a href="#关于prototype" class="headerlink" title="关于prototype"></a>关于<code>prototype</code></h2><p>当一个新函数被创建时，会被赋予一个 <code>prototype</code>属性，这个属性是用来<strong>存放继承特性</strong>的地方<br><strong>只有函数才有<code>prototype</code></strong>。<br><a id="more"></a></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Demo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Demo.prototype)  <span class="comment">// &#123;constructor: ƒ&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以表示为 <code>Demo.prototype={constructor: ƒ}</code></p></blockquote><p>因此我们可以对这个 <code>prototype</code>属性进行扩展，存放更多继承的特性，例如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Demo.prototype.call = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'我是新增加的继承特性'</span>)&#125;;</span><br><span class="line"><span class="keyword">var</span> he = <span class="keyword">new</span> Demo();  <span class="comment">//Demo是构造器，he是构造函数，通过new连接</span></span><br><span class="line">he.call();   <span class="comment">//我是新增加的继承特性</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>但是要注意的是，因为是继承特性，如果直接调用</strong><code>Demo.call()</code>是不存在的</p><p><strong><code>Demo</code>函数不做继承的属性直接写，例如：<code>Demo.call = function(){}</code></strong></p></blockquote><p>问题深入：JS是基于原型的语言</p><p>JS中的对象都继承于<code>object.prototype</code>，所以，尽管JS实现了继承概念，但是单一的原型<code>object.prototype</code>未免丧失活力，因此JS提供了可以改变对象的原型，以达到继承属性的办法</p><p>比如我们有一个Demo函数，其原型是<code>object.prototype</code>，现在，我们要改变他的原型以获得想要的属性</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="number">2</span>&#125;;       <span class="comment">//定义一个我们想要继承的属性 ←--</span></span><br><span class="line"><span class="keyword">var</span> Demo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;       <span class="comment">//                  ↑</span></span><br><span class="line">Demo.prototype = obj;    <span class="comment">//改变原型指向  -----------→ ↑</span></span><br><span class="line"><span class="keyword">var</span> he = <span class="keyword">new</span> Demo();</span><br><span class="line"><span class="built_in">console</span>.log(he.name)     <span class="comment">//2   Demo原型成功指向了obj，大功告成</span></span><br></pre></td></tr></table></figure><h2 id="关于-proto"><a href="#关于-proto" class="headerlink" title="关于__proto__"></a>关于<code>__proto__</code></h2><p><code>__proto__</code>可以用于检测<strong>构造该对象的构造器</strong>的原型，听起来有点绕口，结合上面的例子</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="number">2</span>&#125;;       <span class="comment">//定义一个我们想要继承的属性 ←--</span></span><br><span class="line"><span class="keyword">var</span> Demo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;       <span class="comment">//                  ↑</span></span><br><span class="line">Demo.prototype = obj;    <span class="comment">//改变原型指向  -----------→ ↑</span></span><br><span class="line"><span class="keyword">var</span> he = <span class="keyword">new</span> Demo();<span class="comment">//he是构造函数，Demo是构造器</span></span><br><span class="line"><span class="built_in">console</span>.log(he.__proto__)     <span class="comment">//&#123;name: 2&#125;</span></span><br></pre></td></tr></table></figure><p><code>he.__proto_</code>刚好等于构造器Demo的原型，换一种写法就是<code>he.__proto_ = Demo.prototype</code></p>]]></content>
      
      <categories>
          
          <category> JS出深入浅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于闭包</title>
      <link href="/2017/08/14/JS--%E5%85%B3%E4%BA%8E%E9%97%AD%E5%8C%85/"/>
      <url>/2017/08/14/JS--%E5%85%B3%E4%BA%8E%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>维基解释：闭包（Closure）是词法闭包（Lexical Closure）的简称，是引用了自由变量的<strong>函数</strong>。这个被引用的自由变量将和这个函数一同存在，即使离开了创造它的环境也不例外</p><blockquote><p>在Js中，如果一个函数在另外一个函数中定义，那么这个函数会访问到父函数里面定义的成员，形成闭包。<br>​或者说，一个函数能访问它被创建时所处的上下文环境，就是闭包。<br><a id="more"></a></p></blockquote><p>主要有三点：</p><ul><li>他是<strong>函数中的函数</strong>（无论嵌套多少层）</li><li>无论他是在父函数<strong>内部调用</strong>还是被<code>return</code>出去<strong>外部接收后调用</strong>，都能记住原来父函数的词法环境</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数在内部被调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)  <span class="comment">//2</span></span><br><span class="line">  &#125;</span><br><span class="line">  f2();   <span class="comment">//内部执行，严格来说不算闭包，是词法作用域的查找方式，从内到外</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数在外部被调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)  <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = f1();   <span class="comment">//此时x等于return出来的f2</span></span><br><span class="line">x();    <span class="comment">//2   这就是闭包，函数在外部被调用，但是函数还能记住创建他的词法环境</span></span><br></pre></td></tr></table></figure><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><h3 id="减少全局变量，延续生命周期"><a href="#减少全局变量，延续生命周期" class="headerlink" title="减少全局变量，延续生命周期"></a>减少全局变量，延续生命周期</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数在外部被调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a =<span class="number">1</span>;  <span class="comment">//a在函数作用域里面，不会污染全局变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a++)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = f1();</span><br><span class="line">result();</span><br></pre></td></tr></table></figure><h3 id="减少传递给函数的参数数量"><a href="#减少传递给函数的参数数量" class="headerlink" title="减少传递给函数的参数数量"></a>减少传递给函数的参数数量</h3><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><h2 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h2><h3 id="对捕获的变量只是个引用，不是复制"><a href="#对捕获的变量只是个引用，不是复制" class="headerlink" title="对捕获的变量只是个引用，不是复制"></a>对捕获的变量只是个引用，不是复制</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(num)  <span class="comment">//引用了num而不是复制</span></span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">    f2()</span><br><span class="line">&#125;</span><br><span class="line">f1()   <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="父函数每调用一次，会产生不同的闭包"><a href="#父函数每调用一次，会产生不同的闭包" class="headerlink" title="父函数每调用一次，会产生不同的闭包"></a>父函数每调用一次，会产生不同的闭包</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="built_in">console</span>.log(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result1 = f1(); </span><br><span class="line">result1();  <span class="comment">//2</span></span><br><span class="line">result1();  <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result2 = f1();<span class="comment">//result和result2虽然都是调用了f1,但是词法作用域是不相同的，不会互相影响</span></span><br><span class="line">result2();  <span class="comment">//2</span></span><br><span class="line">result2();  <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h3 id="循环中问题"><a href="#循环中问题" class="headerlink" title="循环中问题"></a>循环中问题</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">//1,2      //能实时打印i</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   <span class="comment">//回调函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(i); <span class="comment">//3,3  //程序加载完才执行，所以是3</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决方案，利用立即执行函数和闭包将参数传递进去</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">1</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(id)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  假设有一个需求，有三个按钮，以此点击发出ajax请求</p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">1</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(i);</span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(i);  <span class="comment">//回调函数不会马上执行  //4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我们期望依次弹出1，2，3，但是结果全是三个4</p><p>  因为for没有快作用域，i暴露在全局之中，回调函数执行时，循环已经结束，此时i=4；</p><p>  解决方案，使用闭包，或者用let代替var</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">1</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(i);</span><br><span class="line">    btn.onclick = (<span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;   <span class="comment">//这是父函数，</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   <span class="comment">//闭包函数</span></span><br><span class="line">            alert(id);  <span class="comment">//函数持续引用父函数里面传递的参数，形成闭包</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实解决思路就是，在回调函数没有执行之前，把想要的参数传递进去，这就可以使用闭包，让回调函数里面的函数，用return函数的方式，引用外部父函数传递的形参</p><p>为什么要使用立即执行函数？是因为i参数改变时，立即执行函数才能把实时参数传递进去</p><p>每次循环的时候，父函数带着想要传递的参数立即执行，因为有闭包的存在，子函数依赖与父函数传递的参数，所以子函数就能正确引用每次循环不同的i值</p></blockquote>]]></content>
      
      <categories>
          
          <category> JS出深入浅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS的解析与执行过程</title>
      <link href="/2017/08/13/JS--JS%E7%9A%84%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/"/>
      <url>/2017/08/13/JS--JS%E7%9A%84%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>在JS真正执行代码之前，会对代码有个预处理过程</p><h2 id="预处理阶段"><a href="#预处理阶段" class="headerlink" title="预处理阶段"></a>预处理阶段</h2><ul><li><p>首先创建<strong>词法环境（这里是全局）</strong></p></li><li><p>把用<strong>声明的方式</strong>创建的函数和用<strong>var定义的变量</strong>扫描出来，把这些函数和变量的<strong>名字</strong>加到词法环境中（这里是全局）</p><a id="more"></a><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LexcialEnvironment (词法环境)</span></span><br><span class="line">&#123;</span><br><span class="line">    a:<span class="literal">undefined</span>,   <span class="comment">//a是变量的名字，右边是值</span></span><br><span class="line">    f:对函数的引用,  <span class="comment">//f是函数的名字，右边引用(函数声明的方式)</span></span><br><span class="line">    g:<span class="literal">undefined</span>     <span class="comment">//g是函数的名字，右边引用(函数表达式创建的函数)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>声明函数 <code>function xx(){}</code>区别于函数表达式<code>var xx = function xx(){}</code></p><p>用函数表达式创建的函数，在预处理阶段，函数名字也会被<strong>加到词法环境</strong>中，但是后面的值不会解析，返回<code>undefined</code></p></blockquote></li></ul><ul><li><p>处理<strong>函数声明</strong>有冲突，会<strong>覆盖</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//function a() &#123;console.log(3);&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="number">3</span>);&#125;</span><br></pre></td></tr></table></figure></li><li><p>处理<strong>变量声明</strong>有冲突，会<strong>忽略</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//function a() &#123;console.log(3);&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="number">3</span>);&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;   <span class="comment">//因为处理变量a有冲突，规则是忽略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以把函数表达式也当作变量声明 var xx = function()&#123;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：① <strong>用var开头的变量或者函数都会被提升，加入到词法环境，值都是<code>undefined</code></strong></p><p>​            ② <strong><code>function a (){}</code>的形式，a被提升同时值是该函数引用</strong></p><p>​            ③ <strong>var 声明冲突会被忽略，function声明会覆盖</strong></p></blockquote><p>​</p></li></ul><h2 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h2><ul><li>在执行阶段就会真正赋值（无论原来值是变量还是函数，都会被覆盖）</li><li>如果碰到在词法环境中找不到的名字，则会报错</li></ul>]]></content>
      
      <categories>
          
          <category> JS出深入浅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>this的用法</title>
      <link href="/2017/08/10/JS--this%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2017/08/10/JS--this%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>JavaScript的 <code>this</code> 总是指向一个对象，而具体指向哪个对象是在运行时基于函数的执行环境动态绑定的，而非函数被声明时的环境</p><p>除去不常用的<code>with</code> 和<code>eval</code> 的情况，具体到实际应用中， this 的指向大致可以分为以下 4种<br><a id="more"></a></p><h2 id="作为对象的方法调用"><a href="#作为对象的方法调用" class="headerlink" title="作为对象的方法调用"></a>作为对象的方法调用</h2><p>  此时<code>this</code>指向该对象</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  getA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert ( <span class="keyword">this</span> === obj ); <span class="comment">// 输出：true</span></span><br><span class="line">    alert ( <span class="keyword">this</span>.a ); <span class="comment">// 输出: 1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.getA();</span><br></pre></td></tr></table></figure><h2 id="作为普通函数调用"><a href="#作为普通函数调用" class="headerlink" title="作为普通函数调用"></a>作为普通函数调用</h2><p>  指向全局对象，在浏览器的 JavaScript里，这个全局对象是 window 对象。</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.name = <span class="string">'globalName'</span>;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( getName() ); <span class="comment">// 输出：globalName</span></span><br></pre></td></tr></table></figure><h2 id="构造器调用"><a href="#构造器调用" class="headerlink" title="构造器调用"></a>构造器调用</h2><p>  当用 new 运算符调用函数时，该函数总会返回一个对象，通常情况下，构造器里的 this 指向返回的这个对象</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Cat = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> white = <span class="keyword">new</span> Cat(p);</span><br><span class="line"><span class="built_in">console</span>.log(white.name) <span class="comment">//p</span></span><br></pre></td></tr></table></figure><h2 id="call或者apply调用"><a href="#call或者apply调用" class="headerlink" title="call或者apply调用"></a><code>call</code>或者<code>apply</code>调用</h2><p>  改变this的指向</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">    name:<span class="string">'p'</span>,</span><br><span class="line">    x:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'o'</span>&#125;;</span><br><span class="line">cat.x.call(obj)  <span class="comment">//o</span></span><br></pre></td></tr></table></figure><p>  ​</p>]]></content>
      
      <categories>
          
          <category> JS出深入浅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gulp入门指南</title>
      <link href="/2017/06/12/Gulp--%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2017/06/12/Gulp--%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p>gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用她，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率<br><a id="more"></a></p><h3 id="1-全局安装-gulp："><a href="#1-全局安装-gulp：" class="headerlink" title="1. 全局安装 gulp："></a>1. 全局安装 gulp：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install --global gulp</span><br></pre></td></tr></table></figure><h3 id="2-作为项目的开发依赖（devDependencies）安装："><a href="#2-作为项目的开发依赖（devDependencies）安装：" class="headerlink" title="2. 作为项目的开发依赖（devDependencies）安装："></a>2. 作为项目的开发依赖（devDependencies）安装：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure><h3 id="3-在项目根目录下创建一个名为-gulpfile-js-的文件："><a href="#3-在项目根目录下创建一个名为-gulpfile-js-的文件：" class="headerlink" title="3. 在项目根目录下创建一个名为 gulpfile.js 的文件："></a>3. 在项目根目录下创建一个名为 <code>gulpfile.js</code> 的文件：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将你的默认的任务代码放在这</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-运行-gulp："><a href="#4-运行-gulp：" class="headerlink" title="4. 运行 gulp："></a>4. 运行 gulp：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gulp</span><br></pre></td></tr></table></figure><p>默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。</p><p>想要单独执行特定的任务（task），请输入 <code>gulp &lt;task&gt; &lt;othertask&gt;</code>。</p>]]></content>
      
      <categories>
          
          <category> Gulp使用参考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gulp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gulp的实例参考</title>
      <link href="/2017/06/12/Gulp--%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
      <url>/2017/06/12/Gulp--%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="基本插件的安装"><a href="#基本插件的安装" class="headerlink" title="基本插件的安装"></a>基本插件的安装</h2><h3 id="GulpJs的安装依赖nodejs，所以先安装nodejs"><a href="#GulpJs的安装依赖nodejs，所以先安装nodejs" class="headerlink" title="GulpJs的安装依赖nodejs，所以先安装nodejs"></a>GulpJs的安装依赖nodejs，所以先安装nodejs</h3><h3 id="打开nodejs里面的cmd文件，安装gulp全局变量"><a href="#打开nodejs里面的cmd文件，安装gulp全局变量" class="headerlink" title="打开nodejs里面的cmd文件，安装gulp全局变量"></a>打开nodejs里面的cmd文件，安装gulp全局变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="安装项目开发所需要的依赖项"><a href="#安装项目开发所需要的依赖项" class="headerlink" title="安装项目开发所需要的依赖项"></a>安装项目开发所需要的依赖项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure><h3 id="安装用来压缩js文件的插件"><a href="#安装用来压缩js文件的插件" class="headerlink" title="安装用来压缩js文件的插件"></a>安装用来压缩js文件的插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp-uglify</span><br></pre></td></tr></table></figure><h3 id="安装用来压缩css文件的插件"><a href="#安装用来压缩css文件的插件" class="headerlink" title="安装用来压缩css文件的插件"></a>安装用来压缩css文件的插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp-minify-css</span><br></pre></td></tr></table></figure><h3 id="解析less的插件"><a href="#解析less的插件" class="headerlink" title="解析less的插件"></a>解析less的插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp-less</span><br></pre></td></tr></table></figure><h3 id="安装用来合并的插件"><a href="#安装用来合并的插件" class="headerlink" title="安装用来合并的插件"></a>安装用来合并的插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp-concat</span><br></pre></td></tr></table></figure><h3 id="用来检查js代码的插件"><a href="#用来检查js代码的插件" class="headerlink" title="用来检查js代码的插件"></a>用来检查js代码的插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp-jshint</span><br></pre></td></tr></table></figure><h3 id="用来重命名的插件"><a href="#用来重命名的插件" class="headerlink" title="用来重命名的插件"></a>用来重命名的插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp-rename</span><br></pre></td></tr></table></figure><h3 id="搭建服务器的插件"><a href="#搭建服务器的插件" class="headerlink" title="搭建服务器的插件"></a>搭建服务器的插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp-connect</span><br></pre></td></tr></table></figure><h2 id="一起安装"><a href="#一起安装" class="headerlink" title="一起安装"></a>一起安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp gulp-uglify gulp-minify-css gulp-concat gulp-jshint gulp-rename</span><br></pre></td></tr></table></figure><ul><li><h3 id="在项目根目录下建一个以gulpfile-js命名的文本"><a href="#在项目根目录下建一个以gulpfile-js命名的文本" class="headerlink" title="在项目根目录下建一个以gulpfile.js命名的文本"></a>在项目根目录下建一个以<code>gulpfile.js</code>命名的文本</h3></li></ul><h2 id="文件的压缩示例"><a href="#文件的压缩示例" class="headerlink" title="文件的压缩示例"></a>文件的压缩示例</h2><h3 id="编辑根目录下的gulifile-js文件"><a href="#编辑根目录下的gulifile-js文件" class="headerlink" title="编辑根目录下的gulifile.js文件 "></a>编辑根目录下的<code>gulifile.js</code>文件 <copy></copy></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);  <span class="comment">//定义依赖项</span></span><br><span class="line"></span><br><span class="line">concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);   <span class="comment">//定义合并插件</span></span><br><span class="line"></span><br><span class="line">mincss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);   <span class="comment">//定义压缩css的插件</span></span><br><span class="line">minjs = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);         <span class="comment">//定义压缩js的插件</span></span><br><span class="line"></span><br><span class="line">rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);<span class="comment">//定义重命名插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义任务   第一个是任务名字，第二个是要执行哪些操作</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'css/*.css'</span>])  <span class="comment">//操作css文件夹中所有的css文件</span></span><br><span class="line">    <span class="comment">// gulp.src(['css/a.css'.'css.b.css'])  //操作css文件夹中ab文件</span></span><br><span class="line">        .pipe(concat(<span class="string">'min.css'</span>))  <span class="comment">//执行合并插件并给合并完成的插件起一个名字</span></span><br><span class="line">        .pipe(mincss())         <span class="comment">//执行压缩插件</span></span><br><span class="line">        .pipe(rename(&#123;<span class="attr">suffix</span>:<span class="string">'.xianyu'</span>&#125;))<span class="comment">//执行重命名插件</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">'css1'</span>))<span class="comment">//把执行以上操作后的文件放在css1文件夹里面</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'js/*.js'</span>])  <span class="comment">//操作js文件夹中所有的js文件</span></span><br><span class="line">    <span class="comment">// gulp.src(['js/a.js'.'js.b.js'])  //操作js文件夹中ab文件</span></span><br><span class="line">        .pipe(concat(<span class="string">'min.js'</span>))  <span class="comment">//执行合并插件并给合并完成的插件起一个名字</span></span><br><span class="line">        .pipe(minjs())         <span class="comment">//执行压缩插件</span></span><br><span class="line">        .pipe(rename(&#123;<span class="attr">suffix</span>:<span class="string">'.xianyu'</span>&#125;))<span class="comment">//执行重命名插件</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">'js'</span>))<span class="comment">//把执行以上操作后的文件放在js文件夹里面</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'css'</span>,<span class="string">'js'</span>]);  <span class="comment">//执行任务名为css的任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自动执行压缩任务</span></span><br><span class="line">gulp.watch(<span class="string">'css/*.css'</span>,[<span class="string">'css'</span>]);   <span class="comment">//如果css文件夹下任何一个css有变动，则执行名字为css的任务</span></span><br><span class="line">gulp.watch(<span class="string">'js/*.js'</span>,[<span class="string">'js'</span>]);      <span class="comment">//如果js文件夹下任何一个js有变动，则执行名字为js的任务</span></span><br></pre></td></tr></table></figure><h3 id="运行-gulp："><a href="#运行-gulp：" class="headerlink" title="运行 gulp："></a>运行 gulp：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><h2 id="实现热更新的例子"><a href="#实现热更新的例子" class="headerlink" title="实现热更新的例子 "></a>实现热更新的例子 <copy></copy></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line">concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);            <span class="comment">//定义合并插件</span></span><br><span class="line">less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);                <span class="comment">//定义less编译插件</span></span><br><span class="line">mincss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);        <span class="comment">//定义压缩css的插件</span></span><br><span class="line">minjs = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);             <span class="comment">//定义压缩js的插件</span></span><br><span class="line">sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);    <span class="comment">//定义sourcemaps</span></span><br><span class="line">connect = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>);          <span class="comment">//自动刷新服务</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'Less'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'src/less/*.less'</span>)             <span class="comment">//入口文件目录</span></span><br><span class="line">        .pipe(sourcemaps.init())</span><br><span class="line">        .pipe(less())                       <span class="comment">//执行less</span></span><br><span class="line">        .pipe(concat(<span class="string">'min.css'</span>))            <span class="comment">//合并文件</span></span><br><span class="line">        .pipe(mincss())                     <span class="comment">//压缩css</span></span><br><span class="line">        .pipe(sourcemaps.write(<span class="string">'./'</span>))       <span class="comment">//生成sourcemaps</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist/src/css'</span>))    <span class="comment">//出口目录</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'src/js/*.js'</span>])               <span class="comment">//入口文件</span></span><br><span class="line">        .pipe(sourcemaps.init())</span><br><span class="line">        .pipe(concat(<span class="string">'min.js'</span>))             <span class="comment">//合并文件</span></span><br><span class="line">        .pipe(minjs())                      <span class="comment">//执行压缩插件</span></span><br><span class="line">        .pipe(sourcemaps.write(<span class="string">'./'</span>))       <span class="comment">//生成sourcemaps</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist/src/js'</span>))     <span class="comment">//出口目录</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./dist/*.html'</span>)</span><br><span class="line">        .pipe(connect.reload());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;           <span class="comment">//搭建服务器</span></span><br><span class="line">    connect.server(&#123;</span><br><span class="line">        root: <span class="string">'dist'</span>,</span><br><span class="line">        livereload: <span class="literal">true</span>,</span><br><span class="line">        port:<span class="number">8080</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'Less'</span>,<span class="string">'js'</span>,<span class="string">'connect'</span>,<span class="string">'html'</span>]);         <span class="comment">//执行任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自动执行压缩任务</span></span><br><span class="line">gulp.watch(<span class="string">'src/less/*.less'</span>,[<span class="string">'Less'</span>]);     <span class="comment">//监视less文件</span></span><br><span class="line">gulp.watch(<span class="string">'src/js/*.js'</span>,[<span class="string">'js'</span>]);           <span class="comment">//监视js文件</span></span><br><span class="line">gulp.watch(<span class="string">'dist/*.html'</span>,[<span class="string">'html'</span>]);           <span class="comment">//监视js文件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Gulp使用参考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gulp </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
